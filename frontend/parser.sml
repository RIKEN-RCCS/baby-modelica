(*static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";*)
(* YYBYACC 1 *)
(* YYMAJOR 1 *)
(* YYMINOR 9 *)
(* Wrapping the generated rules by a structure is by surrounding *)
(* the rules with %{structure parser = struct...}% grammar ...end. *)
(* It needs definitions of yylval and yylex(). *)
(* The parser toplevel is yyparse() defined here. *)

(* line 5 "modelica-grammar.y" *)

(* Parser rules of Modelica-3.4. *)

(* Load "ast.sml", "parser.sml", and "lexer.sml" in this order,
   because the generated "parser.sml" depends on "ast.sml". *)

structure parser :
sig

type yylexstate_t = {s : TextIO.instream, line : int, column : int,
		     unget : char list, end_as_id : bool}
type yyv_t = ast.vs_t

type yylex_t = yylexstate_t -> int * yyv_t * yylexstate_t
type yysm_t = {
  yydebug : bool ref,
  yystate : int ref,
  yynerrs : int ref,
  yyerrflag : int ref,
  yychar : int ref,
  yysp : int ref,
  yyval : yyv_t ref,
  yylval : yyv_t ref,
  yyss : int Array.array,
  yyvs : yyv_t Array.array,
  yylexstate : yylexstate_t ref}

val yyparse : bool -> yylex_t -> yylexstate_t -> yysm_t
val yyvs_ref : yysm_t -> int -> yyv_t

val ADD_OPERATOR : int
val ALGORITHM : int
val AND : int
val ANNOTATION : int
val BLOCK : int
val BREAK : int
val CLASS : int
val CONNECT : int
val CONNECTOR : int
val CONSTANT : int
val CONSTRAINEDBY : int
val DEF : int
val DER : int
val DISCRETE : int
val EACH : int
val ELSE : int
val ELSEIF : int
val ELSEWHEN : int
val ENCAPSULATED : int
val END : int
val ENUMERATION : int
(*val EOF : int*)
val EQUATION : int
val EXP_OPERATOR : int
val EXPANDABLE : int
val EXTENDS : int
val EXTERNAL : int
val FALSE : int
val FINAL : int
val FLOW : int
val FOR : int
val FUNCTION : int
val IDENT : int
val IF : int
val IMPORT : int
val IMPURE : int
val IN : int
(*val INITIAL : int*)
val INITIALALGORITHM : int
val INITIALEQUATION : int
val INNER : int
val INPUT : int
val LOOP : int
val MODEL : int
val MUL_OPERATOR : int
val NOT : int
val OPERATOR : int
val OR : int
val OUTER : int
val OUTPUT : int
val PACKAGE : int
val PARAMETER : int
val PARTIAL : int
val PROTECTED : int
val PUBLIC : int
val PURE : int
val RECORD : int
val REDECLARE : int
val RELATIONAL_OPERATOR : int
val REPLACEABLE : int
val RETURN : int
val STREAM : int
val STRING : int
val THEN : int
val TRUE : int
val TYPE : int
val UNSIGNED_NUMBER : int
val WHEN : int
val WHILE : int
val WITHIN : int

end = struct

open ast

type yylexstate_t = {s : TextIO.instream, line : int, column : int,
		     unget : char list, end_as_id : bool}

val yylexstate_dummy = {s=TextIO.stdIn, line=0, column=0,
			unget=[#"_"], end_as_id=false}

type yyv_t = ast.vs_t

type yylex_t = yylexstate_t -> int * yyv_t * yylexstate_t

val yyvalue_null = (ast.VS_TOKEN "0")

fun set_end_as_id b {s=s0, line=l0, column=c0, unget=u0, end_as_id=_} = (
    {s=s0, line=l0, column=c0, unget=u0, end_as_id=b})

(* Use ++ instead of @ because @ is taken by byacc. *)

val op ++ = List.@
infixr 5 ++

(* line 134 "modelica-grammar.y" *)
type yyv_t = ast.vs_t 
(* line 139 "y.tab.c" *)
  val IDENT = 257
  val STRING = 258
  val UNSIGNED_NUMBER = 259
  val ALGORITHM = 260
  val AND = 261
  val ANNOTATION = 262
  val BLOCK = 263
  val BREAK = 264
  val CLASS = 265
  val CONNECT = 266
  val CONNECTOR = 267
  val CONSTANT = 268
  val CONSTRAINEDBY = 269
  val DER = 270
  val DISCRETE = 271
  val EACH = 272
  val ELSE = 273
  val ELSEIF = 274
  val ELSEWHEN = 275
  val ENCAPSULATED = 276
  val END = 277
  val ENUMERATION = 278
  val EQUATION = 279
  val EXPANDABLE = 280
  val EXTENDS = 281
  val EXTERNAL = 282
  val FALSE = 283
  val FINAL = 284
  val FLOW = 285
  val FOR = 286
  val FUNCTION = 287
  val IF = 288
  val IMPORT = 289
  val IMPURE = 290
  val IN = 291
  val INITIALEQUATION = 292
  val INITIALALGORITHM = 293
  val INNER = 294
  val INPUT = 295
  val LOOP = 296
  val MODEL = 297
  val NOT = 298
  val OPERATOR = 299
  val OR = 300
  val OUTER = 301
  val OUTPUT = 302
  val PACKAGE = 303
  val PARAMETER = 304
  val PARTIAL = 305
  val PROTECTED = 306
  val PUBLIC = 307
  val PURE = 308
  val RECORD = 309
  val REDECLARE = 310
  val REPLACEABLE = 311
  val RETURN = 312
  val STREAM = 313
  val THEN = 314
  val TRUE = 315
  val TYPE = 316
  val WHEN = 317
  val WHILE = 318
  val WITHIN = 319
  val DEF = 320
  val RELATIONAL_OPERATOR = 321
  val ADD_OPERATOR = 322
  val MUL_OPERATOR = 323
  val EXP_OPERATOR = 324
  val YYERRCODE = 256
val yylhs = Vector.fromList [                            ~1,
    0,    0,   76,   76,    3,    3,    3,    1,    1,    5,
    5,    4,    4,    4,    4,    4,    4,    4,    4,    4,
    4,    4,    4,    4,    4,    4,    4,    6,    6,    6,
    8,    8,    8,    9,    9,    9,    9,    9,    9,    9,
    7,   61,   61,   96,   96,   96,   63,   63,   64,   24,
   24,   24,   24,   27,   27,   27,   27,   27,   23,   23,
   23,   23,   23,   23,   23,   23,   65,   78,   78,   78,
   78,   26,   26,   25,   25,   25,   25,   25,   25,   25,
   25,   77,   77,   29,   29,   29,   29,   29,   29,   29,
   29,   28,   28,   28,   28,   62,   22,   22,   22,   22,
   14,   14,   11,   11,   13,   12,   95,   95,   95,   97,
   97,   97,   97,   18,   18,   15,   15,   35,   17,   17,
   17,   17,   73,   73,   73,   73,   72,   72,   71,   71,
   66,   66,   69,   69,   69,   68,   68,   67,   67,   70,
   70,   70,   70,   10,   16,    2,   19,   19,   19,   19,
   21,   21,   31,   31,   20,   20,   85,   85,   30,  101,
  101,  101,  101,  101,  101,   84,   81,   81,   81,   81,
   81,   81,   81,   81,   81,  103,   89,   89,   88,   88,
   80,   93,   93,   92,   92,  102,   79,   60,   60,   59,
   59,   83,  104,   90,   90,   82,   94,   94,  100,   36,
   36,   91,   91,   45,   45,   45,   39,   39,   41,   41,
   40,   40,   44,   44,   33,   33,   33,   46,   46,   37,
   37,   58,   58,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   75,   75,   74,   74,   34,   34,
   34,   34,   34,   34,   54,   54,   52,   52,   52,   52,
   53,   53,   53,   47,   47,   47,   48,   48,   55,   55,
   42,   38,   38,   32,   32,   56,   56,   56,   56,   51,
   51,   49,  105,  106,   50,   50,   57,   57,   99,   99,
   86,   86,   87,   87,   98, 0]
val yylen = Vector.fromList [                             2,
    1,    2,    2,    3,    0,    3,    4,    2,    3,    1,
    2,    1,    1,    1,    2,    1,    1,    2,    1,    1,
    1,    2,    2,    2,    3,    3,    1,    1,    1,    1,
    5,    6,    7,    7,    6,    7,    5,    6,    6,    7,
    9,    1,    3,    0,    1,    1,    1,    3,    2,    1,
    3,    4,    6,    1,    3,    3,    2,    2,    0,    1,
    1,    2,    1,    2,    2,    3,    1,    3,    4,    5,
    6,    0,    3,    1,    1,    3,    4,    6,    3,    4,
    6,    0,    1,    0,    1,    1,    1,    2,    2,    2,
    3,    3,    5,    7,    5,    1,    2,    3,    3,    4,
    2,    3,    2,    3,    2,    3,    0,    1,    1,    0,
    1,    1,    1,    1,    3,    2,    3,    2,    1,    2,
    2,    3,    1,    3,    2,    2,    2,    3,    1,    3,
    1,    1,    3,    3,    3,    2,    2,    2,    3,    2,
    3,    2,    3,    2,    2,    2,    0,    1,    1,    2,
    2,    2,    0,    3,    2,    2,    0,    3,    2,    3,
    1,    1,    1,    1,    2,    2,    3,    2,    6,    1,
    1,    1,    1,    1,    1,    8,    0,    5,    0,    2,
    8,    0,    5,    0,    2,    6,    6,    1,    3,    1,
    3,    6,    7,    0,    5,    7,    0,    5,    6,    1,
    7,    0,    5,    1,    3,    5,    1,    3,    1,    3,
    1,    2,    1,    3,    1,    2,    3,    1,    3,    1,
    3,    1,    3,    1,    1,    1,    1,    2,    2,    2,
    1,    3,    3,    3,    1,    2,    1,    3,    1,    2,
    2,    3,    3,    4,    2,    3,    1,    3,    3,    1,
    1,    3,    1,    1,    3,    3,    1,    3,    1,    3,
    3,    1,    1,    4,    5,    0,    1,    2,    3,    1,
    3,    5,    0,    0,    1,    3,    1,    1,    1,    2,
    0,    1,    1,    3,    2, 0]
val yydefred = Vector.fromList [                          0,
    0,    0,    0,    5,  237,    3,    0,   16,   12,   17,
    0,    0,    0,   21,    0,   13,    0,   20,    0,    0,
   14,   19,    0,   10,    0,    0,    4,    0,    0,   18,
    0,   23,    0,   24,   15,   11,   22,    0,    6,    0,
    0,    8,   30,   28,   29,  238,    9,    7,   26,   25,
  283,    0,   72,    0,    0,    0,    0,   45,   46,    0,
    0,    0,    0,    0,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,   83,   75,    0,   74,    0,
  157,    0,  153,    0,  153,  157,   72,   72,   58,   57,
    0,  284,    0,  149,    0,  127,    0,  129,  132,  131,
    0,   72,    0,    0,    0,    0,    0,    0,   47,    0,
    0,    0,    0,   37,    0,   31,    0,    0,    0,   73,
    0,    0,   85,    0,    0,  285,    0,    0,   67,    0,
    0,    0,    0,    0,   60,    0,    0,    0,    0,   51,
  150,    0,    0,  136,  137,    0,  128,    0,    0,    0,
    0,   49,    0,   35,    0,    0,    0,   39,   38,  280,
    0,    0,   98,    0,    0,   92,    0,   90,   88,  108,
    0,  109,   79,   76,    0,    0,    0,    0,  170,    0,
    0,  171,    0,    0,    0,    0,  173,  172,    0,  175,
  174,    0,  225,  224,    0,    0,  226,    0,    0,    0,
    0,  227,    0,    0,    0,    0,    0,    0,    0,    0,
  218,    0,  209,    0,    0,  211,    0,    0,  163,    0,
  162,  161,  164,    0,  240,    0,    0,    0,    0,    0,
   62,   64,  133,    0,  134,    0,  135,    0,    0,    0,
    0,    0,    0,  138,  130,    0,   32,   42,    0,   34,
   36,   48,   40,    0,  277,    0,  278,  200,    0,  275,
  100,    0,    0,    0,   91,    0,    0,  105,    0,  114,
    0,    0,    0,  113,  111,  112,    0,    0,  188,    0,
    0,    0,    0,  267,    0,    0,    0,  168,  166,  158,
    0,  229,    0,    0,  212,  230,    0,    0,    0,    0,
    0,  270,    0,    0,  154,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  159,   68,    0,  242,    0,    0,
    0,   66,    0,  146,  144,    0,    0,  141,  143,  126,
  125,    0,  139,   33,    0,    0,    0,  228,    0,    0,
   95,   93,    0,    0,    0,    0,    0,  120,    0,    0,
  116,    0,    0,  106,    0,  157,    0,  157,  157,  157,
    0,    0,  167,    0,    0,  245,  263,    0,    0,  259,
    0,    0,    0,  153,  153,  153,  232,    0,    0,  234,
    0,    0,  233,    0,    0,    0,    0,  210,  221,  160,
  219,   69,   53,    0,  244,    0,  145,    0,  124,   41,
   43,    0,  276,  272,    0,   81,   78,  122,  118,  117,
  115,  191,    0,  189,    0,    0,    0,    0,  269,    0,
    0,    0,    0,  246,    0,    0,    0,    0,    0,    0,
    0,  255,  271,    0,    0,   70,    0,  102,  202,   94,
    0,    0,    0,    0,    0,  262,  261,    0,    0,    0,
  248,    0,    0,  260,    0,    0,    0,    0,    0,    0,
   71,    0,  187,  157,    0,    0,    0,    0,  192,  169,
  264,    0,    0,  199,  186,  153,    0,    0,    0,    0,
  258,    0,    0,    0,    0,    0,    0,  196,  265,  252,
    0,    0,    0,    0,  193,  201,    0,  157,  181,  157,
  153,  176,  153,    0,    0,    0,    0,    0,  203, 0]
val yydgoto = Vector.fromList [                           2,
   23,  233,    3,   24,   25,   42,   43,   44,   45,  235,
  174,  175,  176,  328,  270,  325,  271,  272,   97,   89,
   90,   77,  131,   61,   78,   62,   63,   79,  124,  208,
  127,  367,  209,  256,  350,  302,  211,  450,  212,  213,
  214,  370,  215,  216,  258,  218,  301,  432,  225,  259,
  303,  371,  451,  288,  452,  285,  260,  304,  279,  280,
  249,  344,  108,  109,  133,   98,  144,   99,  100,  145,
  101,  242,  243,   71,   72,    4,   80,  134,  187,  188,
  189,  190,  191,  192,  125,  113,   54,  478,  457,  458,
  462,  466,  442,  443,  177,   60,  277,   91,  114,  219,
  220,  221,  222,  223,  115,  340, 0]
val yysindex = Vector.fromList [                       ~218,
   51,    0, 2030,    0,    0,    0,   86,    0,    0,    0,
 2125,  ~97, 2094,    0,  ~81,    0, ~161,    0, 1292,  ~78,
    0,    0,  124,    0,  ~99, 2030,    0,  ~59,  ~99,    0,
  143,    0,  ~49,    0,    0,    0,    0,  ~26,    0,  ~35,
   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, ~114,    0,  208,   ~6,  277,  295,    0,    0,   ~9,
   70, ~135,  903,  107,  ~31,  114,    0,   ~9,   99,  121,
  373,   ~6,  171,   ~9,  177,    0,    0,  396,    0,  ~93,
    0,  404,    0,   93,    0,    0,    0,    0,    0,    0,
  410,    0,  191,    0,  ~68,    0, ~188,    0,    0,    0,
  202,    0,  210,  453,  114,  450,  114,  296,    0,  373,
   ~6,  114,  257,    0,  411,    0,  ~22,  470,   ~8,    0,
  ~79,  238,    0, 1925,  463,    0,  577,  503,    0,  287,
  487,  116,  101,  257,    0,  577,  463, ~135, ~135,    0,
    0, 1960, 2063,    0,    0,  ~21,    0, ~159,  270,  291,
  293,    0,  114,    0,  114,  298,  114,    0,    0,    0,
  646,  257,    0,  121,   15,    0,  255,    0,    0,    0,
 1999,    0,    0,    0,   ~9,  305, ~151,    0,    0,  306,
  791,    0,  791,  791,  791,  ~33,    0,    0,  114,    0,
    0,  506,    0,    0,  531,  534,    0,  306,  791,  827,
  534,    0,  791,  911,  791,  791,  791,  516, ~239,  147,
    0,  ~43,    0,  316,  259,    0,  520,  261,    0,  114,
    0,    0,    0,  650,    0,    0,  257,  328,  333,  257,
    0,    0,    0,  335,    0,  305,    0,  324,  324,  791,
  791,  544,  114,    0,    0,  338,    0,    0,  341,    0,
    0,    0,    0,  791,    0,  147,    0,    0,  555,    0,
    0,    4,  114,  293,    0,  324,  324,    0,  ~34,    0,
 ~154,  565,  305,    0,    0,    0,   23,  321,    0,  ~36,
  300,  302,  322,    0,  360,  791,  397,    0,    0,    0,
   12,    0,  ~20,  310,    0,    0,  311,  261,  367,   ~2,
  502,    0,  584,   37,    0,  827,  911,    0,  800,  800,
  800,  911,  791,  911,    0,    0,  409,    0,  571,  591,
    0,    0,  572,    0,    0,  114,   ~9,    0,    0,    0,
    0,  791,    0,    0,  114,  377,  325,    0,  646,  543,
    0,    0,  594,  515,  114,  114,  ~34,    0,  791,  114,
    0,  305,  565,    0,  791,    0,  306,    0,    0,    0,
  323,  791,    0,  580,  121,    0,    0,  356,  600,    0,
  607,  601,  183,    0,    0,    0,    0,  306,  791,    0,
  791,  791,    0,  327,  261,  316,  ~12,    0,    0,    0,
    0,    0,    0,  722,    0, ~134,    0,  404,    0,    0,
    0,  791,    0,    0,  114,    0,    0,    0,    0,    0,
    0,    0,  334,    0,  463,  463,  855,   12,    0,  730,
  184,  306,  738,    0,  393,   12,  349,  577,  577,  616,
  617,    0,    0,  584,  800,    0,  420,    0,    0,    0,
  379,  ~62,   82,  351,  147,    0,    0,    6,  616,  628,
    0,  601,  580,    0,  138,  387,  136,  117,  791,  376,
    0,  240,    0,    0,  791,  400,  791,  361,    0,    0,
    0,  422,  738,    0,    0,    0,  791,  402,  791,  364,
    0,  791,  791,  463,  368,  395,  374,    0,    0,    0,
  577,  380,  405,  384,    0,    0,  388,    0,    0,    0,
    0,    0,    0,  791,  463,  463,  577,  577,    0, 0]
val yyrindex = Vector.fromList [                        149,
    0,    0,  699,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  ~92,    0,    0,    0,
    0,    0,    0,    0,    0,  703,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1430,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   59,    0,  960, 1430,    0,    0,    0,    0,    0,
    0, 1485,  431,    0, ~168, 1430,    0,    0,    0,    0,
  119,   40,    0,    0,    0,    0,    0,    0,    0, 1654,
    0,    0,    0,  651,    0,    0,    0,    0,    0,    0,
    0,    0, 1155,    0, 1878,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   35,    0,   44,    0,    0,  449,
   44,   44,   ~5,    0,    0,    0,  654,   91,   49,    0,
 1709, 1766,    0,  ~37,  604,    0,  653,   61,    0,    0,
    0,    0,  655,  657,    0, 1343, 1892, 1542, 1599,    0,
    0,  ~37,  ~37,    0,    0,  427,    0, ~168,    0,    0,
    0,    0,   44,    0,   44,    0,   44,    0,    0,    0,
    0,  658,    0,    0,    0,    0, 1823,    0,    0,    0,
  ~37,    0,    0,    0,    0,  618,   ~1,  237,    0,    0,
    0,    0,    0,    0,  429,    0,    0,    0,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  429,    0,    0,    0, 1237,  156,
    0, 1272,    0, 1323,  528,    0,    0,  878,    0,   49,
    0,    0,    0,    0,    0,  280,  451,    0,    0,  667,
    0,    0,    0,    0,    0,    0,    0,  440,  441,    0,
    0,  477,  427,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  471,    0,    0,  637,    0,
    0,   49,   49,    0,    0,  672,  675,    0,  538,    0,
   53,  ~24,    0,    0,    0,    0,   59,  ~11,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1032,    0,  611,
    0,    0,   43,    0,    0,    0,    0, 1226,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  401,    0,    0,    0,    0,   50,    0,    0,    0,    0,
    0,    0,    0,    0,  ~30,    0,    0,    0,    0,    0,
    0,    0,  613,    0,   49,   49,  529,    0,    0,   53,
    0,    0,   21,    0,    0,    0,    0,    0,    0,    0,
    0,  442,    0,   75,    0,    0,    0,  460,  701,    0,
    0,  702,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1266, 1087, 1344, 1369,    0,    0,    0,
    0,    0,    0,    0,    0,   59,    0,   65,    0,    0,
    0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  113,  174,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  129,  199,  622,
  623,    0,    0,   83,    0,    0,    0,    0,    0,    0,
    0,  473,    0,    0,    0,    0,    0,    0,  711,  712,
    0,  713,    0,    0,    0,    0,  479,    0,    0, 1390,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  481,    0,    0,    0,    0,    0,    0,
  483,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  153,  230,  158,  247,    0, 0]
val yygindex = Vector.fromList [                          0,
   62,  621,  757,  747,   52,  743,    0,    0,  540,  634,
  608,    0,  385,  ~70,  430,    0,  547,  526,  693,    0,
    0,    0,    0,   ~7,    0,  447,    0,    0,    0,    0,
  ~83,    0,  497,  ~84,    0, ~113,  490, ~228, ~236,  494,
  499,  381,  498,  609, ~124, ~117,    0,  352,  ~41,    0,
 ~169,    0,  339, ~145, ~243,  610,  480,    0,  461, ~175,
  556,    0,    0,  666,    0,  677,    0,    0,    0,  681,
    0,  ~50, ~192,    3,  ~57,    0,    0,  694,    0,    0,
    0,    0,    0,    0,  ~85,  512,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  553,    0,  383,  ~91,    0,
    0,    0,    0,    0,    0,    0, 0]
val YYTABLESIZE = 2441
val yytable = Vector.fromList [                         132,
  137,  136,  217,    7,   66,   65,  287,  357,  107,   96,
  104,  217,  229,  152,  310,  154,  117,   65,   65,  158,
  159,  112,  293,  357,   28,   52,  241,  166,  281,  190,
  111,  126,  190,   65,  103,  279,   70,  165,  279,  241,
  186,  379,  210,  372,  110,  435,  471,  257,  132,   28,
  292,  210,  186,  279,  317,  296,  263,  130,  369,  103,
  157,  250,   29,  251,  308,  253,  162,  281,    5,  282,
  283,  284,  110,  387,   31,  281,  348,  119,  281,  104,
  281,  306,  307,  281,  281,  294,  298,  281,  147,  297,
  281,  284,  300,  281,  149,  382,  281,  289,  281,  146,
    1,  222,  281,   51,   44,  101,  239,  281,  101,    6,
  338,  281,   93,  190,  239,  239,  274,  268,  239,  275,
  239,  239,  143,  101,   94,   34,  330,  331,  315,  383,
  273,   28,  239,  349,  273,  222,  237,  264,  130,  107,
  337,  223,  147,   57,   27,   74,  130,   35,    5,  237,
   95,  273,  276,   75,  408,   56,  106,   40,  235,  235,
   58,  229,  235,   57,   27,  273,  262,   59,  329,   30,
  341,  342,  363,  368,   76,  223,  228,  235,  474,  351,
   58,   41,   39,  229,  318,  173,  287,   59,   27,  385,
  121,  447,  229,  234,  234,  345,  346,   46,  460,  390,
  122,   48,  430,   93,  472,   32,  373,  123,   37,  235,
  464,  465,  434,  231,  167,   94,  231,   33,  399,  107,
   38,  168,   51,  448,  437,  257,  426,  347,  229,   28,
  107,  281,  266,  107,  397,  409,   51,   49,  281,   82,
   93,  412,  147,  400,  103,  148,  449,    5,  419,   51,
   64,   51,   94,  406,  407,  110,  309,  107,  410,  356,
   50,   51,  453,  279,  107,  431,  107,  433,  178,  398,
  413,   46,  415,  416,  417,  374,  239,  239,   95,  395,
  239,   55,  239,  378,  190,  240,  286,  309,  439,  104,
  427,  428,  429,  110,  239,  239,  281,  239,  240,  470,
  110,  281,  217,  217,  217,  281,  446,    5,  281,  446,
  281,  281,  281,  440,  281,   44,   68,   58,  281,  241,
  241,  281,  101,  241,   59,  241,  101,  273,  186,  239,
  186,  186,  186,  445,   69,  239,  155,  241,  241,  156,
  241,  455,  210,  210,  210,  431,   73,  438,  237,  128,
  129,  485,  237,  487,   82,  105,  467,  128,  468,  446,
  239,  239,   82,  492,   92,  494,  217,  421,  496,  497,
  273,   51,  241,  185,  239,  235,  235,    5,  484,  130,
  235,  335,  217,  217,  336,  182,  182,  235,  205,  182,
  509,  479,  491,  480,  130,  239,  239,  239,  239,  186,
  361,  177,  177,  362,  241,  177,  210,  377,  476,  477,
  362,    5,  505,    5,  506,    5,  231,  507,   28,  508,
  186,  186,  210,  210,    5,  183,  183,  116,    5,  183,
  178,  178,    5,  118,  178,    5,  205,  366,    5,  207,
  243,  243,  130,   65,  243,    5,  243,    5,  197,  392,
  197,    5,  381,    5,  120,  231,    5,    5,  243,  243,
  461,  243,  489,  381,    5,  425,  135,  281,  140,  266,
  281,  206,  266,  194,  141,  194,  231,  231,  231,  231,
  140,  142,  268,  140,  142,  268,  150,  207,  236,  236,
  153,  273,  236,  243,  239,  160,  151,  239,  239,  163,
  262,  161,  185,  262,  198,  239,  198,  236,  130,  239,
  239,  231,  482,  483,  231,  231,  232,  123,   82,  206,
  123,  195,  239,  195,  239,  243,  236,  236,  231,  231,
  164,  231,  239,  138,  139,  123,  239,  241,  169,  236,
  241,  241,  224,  226,  261,  227,  246,  247,  241,  248,
  239,   53,  241,  241,  105,  265,  239,  239,  239,  239,
  239,  269,  278,  231,  290,  241,   67,  241,  220,  121,
  291,  220,  121,  287,  305,  241,  311,  102,  119,  241,
  313,  119,  312,  314,  320,  220,  220,  121,  220,  321,
  178,  323,  327,  241,  334,  231,  119,  179,  339,  241,
  241,  241,  241,  241,  332,  178,  193,  194,  352,  319,
  441,  355,  322,  358,  195,  359,  205,  360,  196,  180,
  220,  181,  130,  375,  376,  456,  380,  381,  273,  393,
  394,  197,  396,  401,  198,  404,  199,  336,  402,  405,
  420,  422,  418,  423,  425,  182,  200,  424,  307,  453,
  183,  184,  220,  364,  193,  194,  201,  244,  243,  357,
  459,  243,  243,  202,  463,  203,  196,  207,  469,  243,
  204,  473,  475,  243,  243,  309,  486,  488,  493,  197,
  495,  498,  499,  365,  254,  205,  243,  500,  243,  205,
  316,  130,  502,  501,  200,  130,  243,  503,    1,  206,
  243,  504,    2,  255,  201,  236,  236,   50,  273,   59,
  236,  202,   97,   61,  243,   63,   99,  236,  204,  178,
  243,  243,  243,  243,  243,   65,  179,   52,  231,  274,
   80,  231,  231,   77,  123,  254,  207,   96,  123,  231,
  207,  247,  250,  231,  231,  123,  256,  257,  180,  184,
  181,  249,  251,  253,  333,  179,  231,  185,  231,  180,
   26,  205,  436,  238,  123,   36,  231,  130,  206,  205,
  231,   47,  206,  324,  182,  130,  239,  205,  267,  183,
  184,  411,  326,  130,  231,  220,  121,  142,  220,  220,
  121,  231,  231,  231,  231,  119,  220,  121,  353,  119,
  220,  220,  384,  391,  388,  454,  119,  386,  295,  389,
  481,  490,  207,  220,  299,  220,  121,  414,  403,  343,
  207,  252,  237,  220,  245,  119,  230,  220,  207,  354,
  205,    0,    0,  178,  193,  194,  130,    0,    0,  205,
    0,  220,  195,    0,  206,  130,  196,    0,  220,  220,
  220,    0,  206,    0,    0,    0,    0,    0,    0,  197,
  206,    0,  198,  155,  199,  155,  205,    0,    0,    0,
    0,    0,  130,    0,  200,    0,    0,    0,    0,    0,
  155,  207,  155,    0,  201,  155,    0,    0,    0,    0,
  207,  202,    0,  203,  185,  155,  155,    0,  204,    0,
  130,    0,  178,  193,  194,    0,  178,  193,  194,  155,
  155,    0,  151,  206,  151,  196,    0,  207,  215,  196,
    0,  215,  206,    0,    0,    0,    0,    0,  197,  151,
    0,  151,  197,  254,  151,  215,  215,  254,  215,    0,
    0,    0,    0,  200,  151,  151,    0,  200,    0,  206,
  205,    0,    0,  201,    0,    0,  130,  201,  151,  151,
  202,    0,    0,    0,  202,    0,    0,  204,    0,    0,
  215,  204,    0,    0,    0,    0,    0,    0,  178,  193,
  194,    0,    0,    0,    0,    0,  178,  193,  194,    0,
    0,  196,    0,    0,  364,  193,  194,    0,    0,  196,
  282,  207,  215,  282,  197,  282,    0,  196,    0,  254,
    0,    0,  197,    0,    0,    0,  365,  254,  282,  200,
  197,    0,    0,    0,  365,  254,    0,  200,    0,  201,
    0,    0,    0,  206,    0,  200,  202,  201,    0,    0,
    0,    0,    0,  204,  202,  201,    0,  178,  193,  194,
    0,  204,  202,    0,    0,    0,  178,  193,  194,  204,
  196,    0,    0,    0,    0,    0,    0,    0,    0,  196,
    0,    0,  216,  197,    0,  216,    0,    0,  254,    0,
    0,    0,  197,  178,  193,  194,    0,    0,  200,  216,
  216,    0,  216,    0,    0,    0,  196,  200,  201,    0,
    0,    0,    0,    0,    0,  202,    0,  201,    0,  197,
    0,  178,  204,    0,  202,    0,    0,    0,  179,    0,
    0,  204,    0,    0,  216,    0,    0,  217,    0,    0,
  217,  444,    0,    0,  201,  215,    0,    0,  215,  215,
  180,  202,  181,    0,  217,  217,  215,  217,  204,    0,
  215,  215,    0,    0,    0,    0,  216,    0,    0,    0,
    0,    0,   81,  215,   82,  215,  182,  178,  193,  194,
    0,  183,  184,  215,    0,    0,    0,  215,    0,  217,
  196,   83,    0,    0,   84,    0,    0,    0,    0,    0,
    0,  215,    0,  197,   85,   86,    0,    0,  215,  215,
  148,    0,    0,    0,    0,    0,    0,    0,   87,   88,
    0,  217,    0,    0,    0,    0,  282,    0,  201,  282,
    0,  282,  282,    0,  282,  202,  282,  282,  282,    0,
  282,    0,    0,    0,    0,  282,  282,    0,  282,  282,
  282,  282,    0,  282,  282,    0,  282,    0,  282,  282,
    0,  282,  282,  282,  282,    0,  282,    0,  282,    0,
  282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
  282,    0,  282,    0,    0,  282,    0,  213,    0,    0,
  213,    0,    0,  228,  165,    0,  228,    0,    0,  216,
    0,    0,  216,  216,  213,  213,    0,  213,    0,    0,
  216,    0,    0,    0,  216,  216,  214,    0,    0,  214,
    0,    0,  204,    0,    0,  204,    0,  216,    0,  216,
    0,    0,    0,  214,  214,    0,  214,  216,    0,  213,
  204,  216,  204,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  217,  216,    0,  217,  217,    0,
    0,    0,  216,  216,    0,  217,    0,    0,  214,  217,
  217,  213,    0,  207,  204,    0,  207,    0,    0,    0,
    0,    0,  217,    0,  217,    0,    0,    0,    0,    0,
  207,  207,  217,  207,  208,    0,  217,  208,    0,    0,
  214,    0,    0,    0,    0,    0,  204,    0,    0,    0,
  217,  208,  208,    0,  208,    0,    0,  217,  217,  205,
    0,  148,  205,    0,    0,  207,    0,  148,    0,  148,
    0,  148,  148,    0,    0,  148,    0,  205,    0,  205,
  206,    0,    0,  206,  148,    0,  208,    0,    0,  148,
    0,  148,    0,    0,  148,    0,    0,  207,  206,  148,
  206,  148,    0,  148,    0,    0,  148,  148,  148,  148,
    0,  205,  148,  148,    0,  148,    0,  148,  208,    0,
  148,    0,    0,    0,    0,  281,    0,    0,    0,    0,
    0,    0,  206,  165,    0,    0,  228,  165,    0,    0,
    0,    0,    0,  205,  213,    0,    0,  213,  213,    0,
    0,    0,    0,    0,    0,  213,    0,    0,    0,  213,
  213,    0,    0,    0,  206,    0,    0,    0,    0,    0,
    0,    0,  213,  214,  213,  228,  214,  214,    0,  204,
   82,    0,  213,  204,  214,    0,  213,    0,  214,  214,
  204,    0,    0,    0,  204,  204,  228,  228,  228,  228,
  213,  214,    0,  214,    8,    0,    9,  204,   10,  204,
    0,  214,    0,    0,    0,  214,    0,  204,    0,    0,
    0,   12,    0,    0,    0,    0,    0,    0,   14,  214,
  207,   15,    0,    0,  207,  204,    0,   82,   16,    0,
   17,  207,    0,    0,   18,  207,  207,    0,    0,   20,
   21,  208,  152,    0,  152,  208,    0,   22,  207,    0,
  207,    0,  208,    0,    0,    0,  208,  208,  207,  152,
    0,  152,  207,    0,  152,    0,  205,    0,    0,  208,
  205,  208,    0,    0,  152,  152,  207,  205,    0,  208,
    0,  205,  205,  208,   82,    0,    0,  206,  152,  152,
    0,  206,    0,    0,  205,    0,  205,  208,  206,    0,
    0,    0,  206,  206,  205,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  206,    0,  206,    0,    0,
    0,    0,  205,    0,    0,  206,  281,    0,    0,  281,
    0,  281,  281,    0,  281,    0,  281,  281,    0,   84,
  281,    0,    0,  206,    0,  281,  281,    0,  281,  281,
  281,  281,    0,  281,  281,    0,  281,    0,  281,  281,
    0,  281,  281,  281,  281,    0,  281,    0,  281,    0,
  281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
  281,   82,  281,    0,   54,  281,   54,   82,    0,   82,
    0,   82,   82,    0,   87,   82,    0,    0,    0,    0,
   82,   54,    0,   54,   82,    0,   54,    0,   82,   82,
    0,   82,    0,    0,   82,    0,   54,   54,   82,   82,
    0,   82,    0,   82,    0,   82,   82,   82,   82,   82,
   54,   54,   82,   82,    0,   82,    0,   82,   82,    0,
   82,   56,    0,   56,   82,    0,   82,    0,   82,   82,
    0,   86,   82,    0,    0,    0,    0,   82,   56,    0,
   56,   82,    0,   56,    0,   82,   82,    0,   82,    0,
    0,   82,    0,   56,   56,   82,   82,    0,   82,    0,
   82,    0,   82,   82,   82,   82,   82,   56,   56,   82,
   82,    0,   82,    0,   82,   82,    0,   82,   55,    0,
   55,   82,    0,   82,    0,   82,   82,    0,   89,   82,
    0,    0,    0,    0,   82,   55,    0,   55,   82,    0,
   55,    0,   82,   82,    0,   82,    0,    0,   82,    0,
   55,   55,   82,   82,    0,   82,    0,   82,    0,   82,
   82,   82,   82,   82,   55,   55,   82,   82,    0,   82,
   84,   82,    0,    0,   82,    0,   84,    0,   84,    0,
   84,   84,    0,  147,   84,    0,    0,    0,    0,   84,
    0,    0,    0,   84,    0,    0,    0,    0,   84,    0,
   84,    0,    0,   84,    0,    0,    0,    0,   84,    0,
   84,    0,   84,    0,    0,   84,   84,   84,   84,    0,
    0,   84,   84,    0,   84,   87,   84,    0,    0,   84,
    0,   87,    0,   87,    0,   87,   87,    0,    0,   87,
    0,    0,    0,    0,   87,    0,    0,    0,   87,    0,
    0,    0,    0,   87,    0,   87,    0,    0,   87,    0,
    0,    0,    0,   87,    0,   87,    0,   87,    0,    0,
   87,   87,   87,   87,    0,    0,   87,   87,    0,   87,
    0,   87,   86,    0,   87,    0,    0,    0,   86,    0,
   86,    0,   86,   86,    0,    0,   86,    0,    0,    0,
    0,   86,    0,    0,    0,   86,    0,    0,    0,    0,
   86,    0,   86,    0,    0,   86,    0,    0,    0,    0,
   86,    0,   86,    0,   86,    0,    0,   86,   86,   86,
   86,    0,    0,   86,   86,    0,   86,    0,   86,   89,
    0,   86,    0,    0,    0,   89,    0,   89,    0,   89,
   89,    0,    0,   89,    0,    0,    0,    0,   89,    0,
    0,    0,   89,    0,    0,    0,    0,   89,    0,   89,
    0,    0,   89,    0,    0,    0,    0,   89,    0,   89,
    0,   89,    0,    0,   89,   89,   89,   89,    0,    0,
   89,   89,    0,   89,  147,   89,    0,    0,   89,    0,
  147,    0,  147,    0,  147,  147,    0,    0,  147,    0,
    0,  156,    0,  156,    0,    0,    0,  147,    0,    0,
    0,    0,  147,    0,  147,    0,    0,  147,  156,    0,
  156,    0,  147,  156,  147,    0,  147,    0,    0,  147,
  147,  147,  147,  156,  156,  147,  147,    8,  147,    9,
  147,   10,    0,  147,    0,    0,    0,  156,  156,    0,
   11,    0,    0,    0,   12,    0,    0,    0,    0,  170,
    0,   14,    0,    0,   15,    0,    0,    0,    0,    0,
    0,   16,    8,   17,    9,    0,   10,   18,    0,   19,
    0,    0,   20,   21,    0,  171,    0,  172,    0,   12,
   22,    0,    0,    0,  170,    0,   14,    0,    0,   15,
    0,    0,    0,    0,    0,    0,   16,    0,   17,    0,
    0,    8,   18,    9,   19,   10,    0,   20,   21,    0,
  143,    0,  172,    0,   11,   22,    0,    0,   12,    0,
    0,    0,    0,  170,    0,   14,    0,    0,   15,    0,
    0,    0,    8,    0,    9,   16,   10,   17,    0,    0,
    0,   18,    0,   19,    0,   11,   20,   21,    0,   12,
    0,  172,    0,   13,   22,    0,   14,    0,    0,   15,
    0,    0,    0,    0,    0,    8,   16,    9,   17,   10,
    0,    0,   18,    0,   19,    0,    0,   20,   21,    0,
    0,    0,   12,    0,    0,   22,    0,  170,    0,   14,
    0,    0,   15,    0,    0,    0,    8,    0,    9,   16,
   10,   17,    0,    0,    0,   18,    0,   19,    0,   11,
   20,   21,    0,   12,    0,  172,    0,    0,   22,    0,
   14,    0,    0,   15,    0,    0,    0,    8,    0,    9,
   16,   10,   17,    0,    0,    0,   18,    0,   19,    0,
    0,   20,   21,    0,   12,    0,    0,    0,    0,   22,
    0,   14,    0,    0,   15,    0,    0,    0,    0,    0,
    0,   16,    0,   17,    0,    0,    0,   18,    0,   19,
    0,    0,   20,   21,    0,    0,    0,    0,    0,    0,
   22, 0]
val yycheck = Vector.fromList [                          84,
   86,   85,  127,    1,   55,   40,   40,   44,   46,   41,
   68,  136,   46,  105,   58,  107,   74,   40,   40,  111,
  112,   72,  198,   44,   46,   61,   61,  119,   59,   41,
   72,   82,   44,   40,   59,   41,   46,   46,   44,   61,
  125,   44,  127,  287,   46,   58,   41,  161,  133,   46,
  196,  136,  137,   59,  224,  201,   42,   46,  287,   67,
  111,  153,   11,  155,  210,  157,  117,  181,  257,  183,
  184,  185,   70,  310,   13,   41,  269,   75,   44,   59,
   41,  321,  322,   44,   41,  199,  204,   44,  257,  203,
   41,  205,  206,   44,  102,   59,   44,  189,   59,   97,
  319,   59,   59,  258,   46,   41,   46,   59,   44,   59,
  256,   59,  272,  125,   40,   41,  268,  175,   44,  271,
   46,   61,  311,   59,  284,  287,  240,  241,  220,   93,
   91,   46,   58,  288,  176,   93,   46,  123,   46,   41,
  254,   59,  311,  278,   59,  281,   46,  309,    0,   59,
  310,   91,  304,  289,  347,  270,   58,  257,   40,   41,
  295,   46,   44,  278,  257,   91,  164,  302,  239,  267,
  262,  263,  286,  287,  310,   93,   61,   59,   41,  271,
  295,  281,   59,   46,  226,  124,   40,  302,  281,  307,
  284,  420,   46,  142,  143,  266,  267,  257,  435,  313,
  294,   59,  378,  272,  448,  287,  291,  301,  287,   91,
  273,  274,  382,   58,  294,  284,   61,  299,  332,  257,
  299,  301,  258,   40,  394,  339,   44,  269,   46,   46,
  268,  262,  171,  271,  326,  349,  258,  287,  269,  262,
  272,  355,   41,  335,  269,   44,  422,  257,  362,  258,
   43,  258,  284,  345,  346,  257,  300,  295,  350,  296,
  287,  258,  257,  269,  302,  379,  304,  381,  257,  327,
  356,  257,  358,  359,  360,  296,   40,   41,  310,  321,
   44,  257,   46,  286,  296,  320,  320,  300,  402,  269,
  374,  375,  376,  295,   58,   59,  262,   61,  320,  445,
  302,  262,  427,  428,  429,  262,  420,  257,  269,  423,
  262,  262,  269,  405,  262,  257,   40,  295,  269,   40,
   41,  269,  258,   44,  302,   46,  262,   91,  413,   93,
  415,  416,  417,  418,   40,  261,   41,   58,   59,   44,
   61,  426,  427,  428,  429,  459,  277,  398,  258,  257,
  258,  465,  262,  467,  262,  257,  275,  257,  277,  473,
  286,  125,  262,  477,  258,  479,  491,  365,  482,  483,
   91,  258,   93,   40,  300,  257,  258,  257,  464,   46,
  262,   41,  507,  508,   44,  273,  274,  269,   40,  277,
  504,  275,  476,  277,   46,  321,  322,  323,  324,  484,
   41,  273,  274,   44,  125,  277,  491,   41,  273,  274,
   44,  263,  498,  265,  500,  267,  261,  501,   46,  503,
  505,  506,  507,  508,  276,  273,  274,  257,  280,  277,
  273,  274,  284,  257,  277,  287,   40,   41,  290,   91,
   40,   41,   46,   40,   44,  297,   46,  299,  275,   41,
  277,  303,   44,  305,   59,  300,  308,  309,   58,   59,
   41,   61,   41,   44,  316,   44,   84,   41,   59,   41,
   44,  123,   44,  275,  284,  277,  321,  322,  323,  324,
   41,   41,   41,   44,   44,   44,  277,   91,   40,   41,
   41,   91,   44,   93,  258,  113,   44,  261,  262,  117,
   41,   91,   40,   44,  275,  269,  277,   59,   46,  273,
  274,   41,  273,  274,   44,  133,  134,   41,  262,  123,
   44,  275,  286,  277,  288,  125,  142,  143,   58,   59,
   61,   61,  296,   87,   88,   59,  300,  258,  301,   91,
  261,  262,   40,  257,  162,   59,  277,  257,  269,  257,
  314,   40,  273,  274,  257,  301,  320,  321,  322,  323,
  324,  257,  257,   93,   59,  286,   55,  288,   41,   41,
   40,   44,   44,   40,   59,  296,  261,   66,   41,  300,
   61,   44,  324,  323,  257,   58,   59,   59,   61,  257,
  257,  257,  269,  314,  257,  125,   59,  264,   44,  320,
  321,  322,  323,  324,   61,  257,  258,  259,   44,  227,
  277,  291,  230,  314,  266,  314,   40,  296,  270,  286,
   93,  288,   46,  314,  314,  277,  125,   44,   91,   59,
   40,  283,   61,  257,  286,   93,  288,   44,  314,  125,
   61,  286,  320,   44,   44,  312,  298,   41,  322,  257,
  317,  318,  125,  257,  258,  259,  308,  146,  258,   44,
   44,  261,  262,  315,  286,  317,  270,   91,  318,  269,
  322,   44,  286,  273,  274,  300,  277,  317,  277,  283,
  317,  314,  288,  287,  288,   40,  286,  314,  288,   40,
   41,   46,  288,  314,  298,   46,  296,  314,    0,  123,
  300,  314,    0,   58,  308,  257,  258,  277,   91,   59,
  262,  315,   59,   59,  314,   59,   59,  269,  322,  257,
  320,  321,  322,  323,  324,   59,  264,  277,  258,   93,
   59,  261,  262,   59,  258,  125,   91,  125,  262,  269,
   91,   41,   41,  273,  274,  269,  125,  125,  286,  277,
  288,   41,   41,   41,  243,  277,  286,  277,  288,  277,
    4,   40,   41,  143,  288,   19,  296,   46,  123,   40,
  300,   29,  123,  234,  312,   46,  143,   40,  171,  317,
  318,  352,  236,   46,  314,  258,  258,   95,  261,  262,
  262,  321,  322,  323,  324,  258,  269,  269,  273,  262,
  273,  274,  306,  314,  311,  425,  269,  309,  200,  312,
  459,  473,   91,  286,  205,  288,  288,  357,  339,  264,
   91,  156,  142,  296,  148,  288,  133,  300,   91,  277,
   40,   ~1,   ~1,  257,  258,  259,   46,   ~1,   ~1,   40,
   ~1,  314,  266,   ~1,  123,   46,  270,   ~1,  321,  322,
  323,   ~1,  123,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,  283,
  123,   ~1,  286,  260,  288,  262,   40,   ~1,   ~1,   ~1,
   ~1,   ~1,   46,   ~1,  298,   ~1,   ~1,   ~1,   ~1,   ~1,
  277,   91,  279,   ~1,  308,  282,   ~1,   ~1,   ~1,   ~1,
   91,  315,   ~1,  317,   40,  292,  293,   ~1,  322,   ~1,
   46,   ~1,  257,  258,  259,   ~1,  257,  258,  259,  306,
  307,   ~1,  260,  123,  262,  270,   ~1,   91,   41,  270,
   ~1,   44,  123,   ~1,   ~1,   ~1,   ~1,   ~1,  283,  277,
   ~1,  279,  283,  288,  282,   58,   59,  288,   61,   ~1,
   ~1,   ~1,   ~1,  298,  292,  293,   ~1,  298,   ~1,  123,
   40,   ~1,   ~1,  308,   ~1,   ~1,   46,  308,  306,  307,
  315,   ~1,   ~1,   ~1,  315,   ~1,   ~1,  322,   ~1,   ~1,
   93,  322,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,  257,  258,
  259,   ~1,   ~1,   ~1,   ~1,   ~1,  257,  258,  259,   ~1,
   ~1,  270,   ~1,   ~1,  257,  258,  259,   ~1,   ~1,  270,
   41,   91,  125,   44,  283,   46,   ~1,  270,   ~1,  288,
   ~1,   ~1,  283,   ~1,   ~1,   ~1,  287,  288,   59,  298,
  283,   ~1,   ~1,   ~1,  287,  288,   ~1,  298,   ~1,  308,
   ~1,   ~1,   ~1,  123,   ~1,  298,  315,  308,   ~1,   ~1,
   ~1,   ~1,   ~1,  322,  315,  308,   ~1,  257,  258,  259,
   ~1,  322,  315,   ~1,   ~1,   ~1,  257,  258,  259,  322,
  270,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,  270,
   ~1,   ~1,   41,  283,   ~1,   44,   ~1,   ~1,  288,   ~1,
   ~1,   ~1,  283,  257,  258,  259,   ~1,   ~1,  298,   58,
   59,   ~1,   61,   ~1,   ~1,   ~1,  270,  298,  308,   ~1,
   ~1,   ~1,   ~1,   ~1,   ~1,  315,   ~1,  308,   ~1,  283,
   ~1,  257,  322,   ~1,  315,   ~1,   ~1,   ~1,  264,   ~1,
   ~1,  322,   ~1,   ~1,   93,   ~1,   ~1,   41,   ~1,   ~1,
   44,  277,   ~1,   ~1,  308,  258,   ~1,   ~1,  261,  262,
  286,  315,  288,   ~1,   58,   59,  269,   61,  322,   ~1,
  273,  274,   ~1,   ~1,   ~1,   ~1,  125,   ~1,   ~1,   ~1,
   ~1,   ~1,  260,  286,  262,  288,  312,  257,  258,  259,
   ~1,  317,  318,  296,   ~1,   ~1,   ~1,  300,   ~1,   93,
  270,  279,   ~1,   ~1,  282,   ~1,   ~1,   ~1,   ~1,   ~1,
   ~1,  314,   ~1,  283,  292,  293,   ~1,   ~1,  321,  322,
   46,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,  306,  307,
   ~1,  125,   ~1,   ~1,   ~1,   ~1,  257,   ~1,  308,  260,
   ~1,  262,  263,   ~1,  265,  315,  267,  268,  269,   ~1,
  271,   ~1,   ~1,   ~1,   ~1,  276,  277,   ~1,  279,  280,
  281,  282,   ~1,  284,  285,   ~1,  287,   ~1,  289,  290,
   ~1,  292,  293,  294,  295,   ~1,  297,   ~1,  299,   ~1,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,   ~1,  313,   ~1,   ~1,  316,   ~1,   41,   ~1,   ~1,
   44,   ~1,   ~1,   58,   59,   ~1,   61,   ~1,   ~1,  258,
   ~1,   ~1,  261,  262,   58,   59,   ~1,   61,   ~1,   ~1,
  269,   ~1,   ~1,   ~1,  273,  274,   41,   ~1,   ~1,   44,
   ~1,   ~1,   41,   ~1,   ~1,   44,   ~1,  286,   ~1,  288,
   ~1,   ~1,   ~1,   58,   59,   ~1,   61,  296,   ~1,   93,
   59,  300,   61,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,
   ~1,   ~1,   ~1,   ~1,  258,  314,   ~1,  261,  262,   ~1,
   ~1,   ~1,  321,  322,   ~1,  269,   ~1,   ~1,   93,  273,
  274,  125,   ~1,   41,   93,   ~1,   44,   ~1,   ~1,   ~1,
   ~1,   ~1,  286,   ~1,  288,   ~1,   ~1,   ~1,   ~1,   ~1,
   58,   59,  296,   61,   41,   ~1,  300,   44,   ~1,   ~1,
  125,   ~1,   ~1,   ~1,   ~1,   ~1,  125,   ~1,   ~1,   ~1,
  314,   58,   59,   ~1,   61,   ~1,   ~1,  321,  322,   41,
   ~1,  257,   44,   ~1,   ~1,   93,   ~1,  263,   ~1,  265,
   ~1,  267,  268,   ~1,   ~1,  271,   ~1,   59,   ~1,   61,
   41,   ~1,   ~1,   44,  280,   ~1,   93,   ~1,   ~1,  285,
   ~1,  287,   ~1,   ~1,  290,   ~1,   ~1,  125,   59,  295,
   61,  297,   ~1,  299,   ~1,   ~1,  302,  303,  304,  305,
   ~1,   93,  308,  309,   ~1,  311,   ~1,  313,  125,   ~1,
  316,   ~1,   ~1,   ~1,   ~1,   46,   ~1,   ~1,   ~1,   ~1,
   ~1,   ~1,   93,  258,   ~1,   ~1,  261,  262,   ~1,   ~1,
   ~1,   ~1,   ~1,  125,  258,   ~1,   ~1,  261,  262,   ~1,
   ~1,   ~1,   ~1,   ~1,   ~1,  269,   ~1,   ~1,   ~1,  273,
  274,   ~1,   ~1,   ~1,  125,   ~1,   ~1,   ~1,   ~1,   ~1,
   ~1,   ~1,  286,  258,  288,  300,  261,  262,   ~1,  258,
   46,   ~1,  296,  262,  269,   ~1,  300,   ~1,  273,  274,
  269,   ~1,   ~1,   ~1,  273,  274,  321,  322,  323,  324,
  314,  286,   ~1,  288,  263,   ~1,  265,  286,  267,  288,
   ~1,  296,   ~1,   ~1,   ~1,  300,   ~1,  296,   ~1,   ~1,
   ~1,  280,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,  287,  314,
  258,  290,   ~1,   ~1,  262,  314,   ~1,   46,  297,   ~1,
  299,  269,   ~1,   ~1,  303,  273,  274,   ~1,   ~1,  308,
  309,  258,  260,   ~1,  262,  262,   ~1,  316,  286,   ~1,
  288,   ~1,  269,   ~1,   ~1,   ~1,  273,  274,  296,  277,
   ~1,  279,  300,   ~1,  282,   ~1,  258,   ~1,   ~1,  286,
  262,  288,   ~1,   ~1,  292,  293,  314,  269,   ~1,  296,
   ~1,  273,  274,  300,   46,   ~1,   ~1,  258,  306,  307,
   ~1,  262,   ~1,   ~1,  286,   ~1,  288,  314,  269,   ~1,
   ~1,   ~1,  273,  274,  296,   ~1,   ~1,   ~1,   ~1,   ~1,
   ~1,   ~1,   ~1,   ~1,   ~1,  286,   ~1,  288,   ~1,   ~1,
   ~1,   ~1,  314,   ~1,   ~1,  296,  257,   ~1,   ~1,  260,
   ~1,  262,  263,   ~1,  265,   ~1,  267,  268,   ~1,   46,
  271,   ~1,   ~1,  314,   ~1,  276,  277,   ~1,  279,  280,
  281,  282,   ~1,  284,  285,   ~1,  287,   ~1,  289,  290,
   ~1,  292,  293,  294,  295,   ~1,  297,   ~1,  299,   ~1,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  257,  313,   ~1,  260,  316,  262,  263,   ~1,  265,
   ~1,  267,  268,   ~1,   46,  271,   ~1,   ~1,   ~1,   ~1,
  276,  277,   ~1,  279,  280,   ~1,  282,   ~1,  284,  285,
   ~1,  287,   ~1,   ~1,  290,   ~1,  292,  293,  294,  295,
   ~1,  297,   ~1,  299,   ~1,  301,  302,  303,  304,  305,
  306,  307,  308,  309,   ~1,  311,   ~1,  313,  257,   ~1,
  316,  260,   ~1,  262,  263,   ~1,  265,   ~1,  267,  268,
   ~1,   46,  271,   ~1,   ~1,   ~1,   ~1,  276,  277,   ~1,
  279,  280,   ~1,  282,   ~1,  284,  285,   ~1,  287,   ~1,
   ~1,  290,   ~1,  292,  293,  294,  295,   ~1,  297,   ~1,
  299,   ~1,  301,  302,  303,  304,  305,  306,  307,  308,
  309,   ~1,  311,   ~1,  313,  257,   ~1,  316,  260,   ~1,
  262,  263,   ~1,  265,   ~1,  267,  268,   ~1,   46,  271,
   ~1,   ~1,   ~1,   ~1,  276,  277,   ~1,  279,  280,   ~1,
  282,   ~1,  284,  285,   ~1,  287,   ~1,   ~1,  290,   ~1,
  292,  293,  294,  295,   ~1,  297,   ~1,  299,   ~1,  301,
  302,  303,  304,  305,  306,  307,  308,  309,   ~1,  311,
  257,  313,   ~1,   ~1,  316,   ~1,  263,   ~1,  265,   ~1,
  267,  268,   ~1,   46,  271,   ~1,   ~1,   ~1,   ~1,  276,
   ~1,   ~1,   ~1,  280,   ~1,   ~1,   ~1,   ~1,  285,   ~1,
  287,   ~1,   ~1,  290,   ~1,   ~1,   ~1,   ~1,  295,   ~1,
  297,   ~1,  299,   ~1,   ~1,  302,  303,  304,  305,   ~1,
   ~1,  308,  309,   ~1,  311,  257,  313,   ~1,   ~1,  316,
   ~1,  263,   ~1,  265,   ~1,  267,  268,   ~1,   ~1,  271,
   ~1,   ~1,   ~1,   ~1,  276,   ~1,   ~1,   ~1,  280,   ~1,
   ~1,   ~1,   ~1,  285,   ~1,  287,   ~1,   ~1,  290,   ~1,
   ~1,   ~1,   ~1,  295,   ~1,  297,   ~1,  299,   ~1,   ~1,
  302,  303,  304,  305,   ~1,   ~1,  308,  309,   ~1,  311,
   ~1,  313,  257,   ~1,  316,   ~1,   ~1,   ~1,  263,   ~1,
  265,   ~1,  267,  268,   ~1,   ~1,  271,   ~1,   ~1,   ~1,
   ~1,  276,   ~1,   ~1,   ~1,  280,   ~1,   ~1,   ~1,   ~1,
  285,   ~1,  287,   ~1,   ~1,  290,   ~1,   ~1,   ~1,   ~1,
  295,   ~1,  297,   ~1,  299,   ~1,   ~1,  302,  303,  304,
  305,   ~1,   ~1,  308,  309,   ~1,  311,   ~1,  313,  257,
   ~1,  316,   ~1,   ~1,   ~1,  263,   ~1,  265,   ~1,  267,
  268,   ~1,   ~1,  271,   ~1,   ~1,   ~1,   ~1,  276,   ~1,
   ~1,   ~1,  280,   ~1,   ~1,   ~1,   ~1,  285,   ~1,  287,
   ~1,   ~1,  290,   ~1,   ~1,   ~1,   ~1,  295,   ~1,  297,
   ~1,  299,   ~1,   ~1,  302,  303,  304,  305,   ~1,   ~1,
  308,  309,   ~1,  311,  257,  313,   ~1,   ~1,  316,   ~1,
  263,   ~1,  265,   ~1,  267,  268,   ~1,   ~1,  271,   ~1,
   ~1,  260,   ~1,  262,   ~1,   ~1,   ~1,  280,   ~1,   ~1,
   ~1,   ~1,  285,   ~1,  287,   ~1,   ~1,  290,  277,   ~1,
  279,   ~1,  295,  282,  297,   ~1,  299,   ~1,   ~1,  302,
  303,  304,  305,  292,  293,  308,  309,  263,  311,  265,
  313,  267,   ~1,  316,   ~1,   ~1,   ~1,  306,  307,   ~1,
  276,   ~1,   ~1,   ~1,  280,   ~1,   ~1,   ~1,   ~1,  285,
   ~1,  287,   ~1,   ~1,  290,   ~1,   ~1,   ~1,   ~1,   ~1,
   ~1,  297,  263,  299,  265,   ~1,  267,  303,   ~1,  305,
   ~1,   ~1,  308,  309,   ~1,  311,   ~1,  313,   ~1,  280,
  316,   ~1,   ~1,   ~1,  285,   ~1,  287,   ~1,   ~1,  290,
   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,  297,   ~1,  299,   ~1,
   ~1,  263,  303,  265,  305,  267,   ~1,  308,  309,   ~1,
  311,   ~1,  313,   ~1,  276,  316,   ~1,   ~1,  280,   ~1,
   ~1,   ~1,   ~1,  285,   ~1,  287,   ~1,   ~1,  290,   ~1,
   ~1,   ~1,  263,   ~1,  265,  297,  267,  299,   ~1,   ~1,
   ~1,  303,   ~1,  305,   ~1,  276,  308,  309,   ~1,  280,
   ~1,  313,   ~1,  284,  316,   ~1,  287,   ~1,   ~1,  290,
   ~1,   ~1,   ~1,   ~1,   ~1,  263,  297,  265,  299,  267,
   ~1,   ~1,  303,   ~1,  305,   ~1,   ~1,  308,  309,   ~1,
   ~1,   ~1,  280,   ~1,   ~1,  316,   ~1,  285,   ~1,  287,
   ~1,   ~1,  290,   ~1,   ~1,   ~1,  263,   ~1,  265,  297,
  267,  299,   ~1,   ~1,   ~1,  303,   ~1,  305,   ~1,  276,
  308,  309,   ~1,  280,   ~1,  313,   ~1,   ~1,  316,   ~1,
  287,   ~1,   ~1,  290,   ~1,   ~1,   ~1,  263,   ~1,  265,
  297,  267,  299,   ~1,   ~1,   ~1,  303,   ~1,  305,   ~1,
   ~1,  308,  309,   ~1,  280,   ~1,   ~1,   ~1,   ~1,  316,
   ~1,  287,   ~1,   ~1,  290,   ~1,   ~1,   ~1,   ~1,   ~1,
   ~1,  297,   ~1,  299,   ~1,   ~1,   ~1,  303,   ~1,  305,
   ~1,   ~1,  308,  309,   ~1,   ~1,   ~1,   ~1,   ~1,   ~1,
  316, 0]
val YYFINAL = 2
val YYMAXTOKEN = 324
(*YYDEBUG*)
val yyname = Vector.fromList [
"end-of-file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",
"","","","","","","'('","')'","'*'","'+'","','","","'.'","","","","","","","","","","","","':'",
"';'","","'='","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","'['","",
"']'","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","'{'","","'}'","",
"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","IDENT","STRING","UNSIGNED_NUMBER","ALGORITHM","AND",
"ANNOTATION","BLOCK","BREAK","CLASS","CONNECT","CONNECTOR","CONSTANT",
"CONSTRAINEDBY","DER","DISCRETE","EACH","ELSE","ELSEIF","ELSEWHEN",
"ENCAPSULATED","END","ENUMERATION","EQUATION","EXPANDABLE","EXTENDS","EXTERNAL",
"FALSE","FINAL","FLOW","FOR","FUNCTION","IF","IMPORT","IMPURE","IN",
"INITIALEQUATION","INITIALALGORITHM","INNER","INPUT","LOOP","MODEL","NOT",
"OPERATOR","OR","OUTER","OUTPUT","PACKAGE","PARAMETER","PARTIAL","PROTECTED",
"PUBLIC","PURE","RECORD","REDECLARE","REPLACEABLE","RETURN","STREAM","THEN",
"TRUE","TYPE","WHEN","WHILE","WITHIN","DEF","RELATIONAL_OPERATOR",
"ADD_OPERATOR","MUL_OPERATOR","EXP_OPERATOR", ""]
(*YYDEBUG*)
val yyrule = Vector.fromList [
"$accept : stored_definition",
"stored_definition : class_definition_loop_",
"stored_definition : within_clause_ class_definition_loop_",
"within_clause_ : WITHIN ';'",
"within_clause_ : WITHIN name ';'",
"class_definition_loop_ :",
"class_definition_loop_ : class_definition_loop_ class_definition ';'",
"class_definition_loop_ : class_definition_loop_ FINAL class_definition ';'",
"class_definition : class_prefixes class_specifier",
"class_definition : ENCAPSULATED class_prefixes class_specifier",
"class_prefixes : class_kind_",
"class_prefixes : PARTIAL class_kind_",
"class_kind_ : CLASS",
"class_kind_ : MODEL",
"class_kind_ : RECORD",
"class_kind_ : OPERATOR RECORD",
"class_kind_ : BLOCK",
"class_kind_ : CONNECTOR",
"class_kind_ : EXPANDABLE CONNECTOR",
"class_kind_ : TYPE",
"class_kind_ : PACKAGE",
"class_kind_ : FUNCTION",
"class_kind_ : PURE FUNCTION",
"class_kind_ : IMPURE FUNCTION",
"class_kind_ : OPERATOR FUNCTION",
"class_kind_ : PURE OPERATOR FUNCTION",
"class_kind_ : IMPURE OPERATOR FUNCTION",
"class_kind_ : OPERATOR",
"class_specifier : long_class_specifier",
"class_specifier : short_class_specifier",
"class_specifier : der_class_specifier",
"long_class_specifier : IDENT string_comment composition END IDENT",
"long_class_specifier : EXTENDS IDENT string_comment composition END IDENT",
"long_class_specifier : EXTENDS IDENT class_modification string_comment composition END IDENT",
"short_class_specifier : IDENT '=' ENUMERATION '(' ':' ')' comment",
"short_class_specifier : IDENT '=' ENUMERATION '(' ')' comment",
"short_class_specifier : IDENT '=' ENUMERATION '(' enum_list ')' comment",
"short_class_specifier : IDENT '=' base_prefix type_specifier comment",
"short_class_specifier : IDENT '=' base_prefix type_specifier class_modification comment",
"short_class_specifier : IDENT '=' base_prefix type_specifier array_subscripts comment",
"short_class_specifier : IDENT '=' base_prefix type_specifier array_subscripts class_modification comment",
"der_class_specifier : IDENT '=' DER '(' type_specifier ',' ident_list_ ')' comment",
"ident_list_ : IDENT",
"ident_list_ : ident_list_ ',' IDENT",
"base_prefix :",
"base_prefix : INPUT",
"base_prefix : OUTPUT",
"enum_list : enumeration_literal",
"enum_list : enum_list ',' enumeration_literal",
"enumeration_literal : IDENT comment",
"composition : element_list_loop_",
"composition : element_list_loop_ annotation ';'",
"composition : element_list_loop_ EXTERNAL external_part_ ';'",
"composition : element_list_loop_ EXTERNAL external_part_ ';' annotation ';'",
"element_list_loop_ : element_list",
"element_list_loop_ : element_list_loop_ PUBLIC element_list",
"element_list_loop_ : element_list_loop_ PROTECTED element_list",
"element_list_loop_ : element_list_loop_ equation_section",
"element_list_loop_ : element_list_loop_ algorithm_section",
"external_part_ :",
"external_part_ : annotation",
"external_part_ : language_specification",
"external_part_ : language_specification annotation",
"external_part_ : external_function_call",
"external_part_ : external_function_call annotation",
"external_part_ : language_specification external_function_call",
"external_part_ : language_specification external_function_call annotation",
"language_specification : STRING",
"external_function_call : IDENT '(' ')'",
"external_function_call : IDENT '(' expression_list ')'",
"external_function_call : component_reference '=' IDENT '(' ')'",
"external_function_call : component_reference '=' IDENT '(' expression_list ')'",
"element_list :",
"element_list : element_list element ';'",
"element : import_clause",
"element : extends_clause",
"element : redeclare_ element_prefix_ component_clause",
"element : redeclare_ element_prefix_ REPLACEABLE component_clause",
"element : redeclare_ element_prefix_ REPLACEABLE component_clause constraining_clause comment",
"element : redeclare_ element_prefix_ class_definition",
"element : redeclare_ element_prefix_ REPLACEABLE class_definition",
"element : redeclare_ element_prefix_ REPLACEABLE class_definition constraining_clause comment",
"redeclare_ :",
"redeclare_ : REDECLARE",
"element_prefix_ :",
"element_prefix_ : OUTER",
"element_prefix_ : INNER",
"element_prefix_ : FINAL",
"element_prefix_ : INNER OUTER",
"element_prefix_ : FINAL INNER",
"element_prefix_ : FINAL OUTER",
"element_prefix_ : FINAL INNER OUTER",
"import_clause : IMPORT name comment",
"import_clause : IMPORT name '.' '*' comment",
"import_clause : IMPORT name '.' '{' import_list '}' comment",
"import_clause : IMPORT IDENT '=' name comment",
"import_list : ident_list_",
"extends_clause : EXTENDS type_specifier",
"extends_clause : EXTENDS type_specifier annotation",
"extends_clause : EXTENDS type_specifier class_modification",
"extends_clause : EXTENDS type_specifier class_modification annotation",
"constraining_clause : CONSTRAINEDBY type_specifier",
"constraining_clause : CONSTRAINEDBY type_specifier class_modification",
"component_clause : type_prefix_type_specifier_ component_list",
"component_clause : type_prefix_type_specifier_ array_subscripts component_list",
"type_prefix_type_specifier_ : type_prefix type_specifier",
"type_prefix : flow_or_stream_ variability_ base_prefix",
"flow_or_stream_ :",
"flow_or_stream_ : FLOW",
"flow_or_stream_ : STREAM",
"variability_ :",
"variability_ : DISCRETE",
"variability_ : PARAMETER",
"variability_ : CONSTANT",
"component_list : component_declaration",
"component_list : component_list ',' component_declaration",
"component_declaration : declaration comment",
"component_declaration : declaration condition_attribute comment",
"condition_attribute : IF expression",
"declaration : IDENT",
"declaration : IDENT modification",
"declaration : IDENT array_subscripts",
"declaration : IDENT array_subscripts modification",
"modification : class_modification",
"modification : class_modification '=' expression",
"modification : '=' expression",
"modification : DEF expression",
"class_modification : '(' ')'",
"class_modification : '(' argument_list ')'",
"argument_list : argument",
"argument_list : argument_list ',' argument",
"argument : element_redeclaration",
"argument : element_modification_or_replaceable",
"element_redeclaration : REDECLARE optional_each_or_final_ short_class_definition",
"element_redeclaration : REDECLARE optional_each_or_final_ component_clause_1",
"element_redeclaration : REDECLARE optional_each_or_final_ element_replaceable",
"element_modification_or_replaceable : optional_each_or_final_ element_modification",
"element_modification_or_replaceable : optional_each_or_final_ element_replaceable",
"element_modification : name string_comment",
"element_modification : name modification string_comment",
"element_replaceable : REPLACEABLE short_class_definition",
"element_replaceable : REPLACEABLE short_class_definition constraining_clause",
"element_replaceable : REPLACEABLE component_clause_1",
"element_replaceable : REPLACEABLE component_clause_1 constraining_clause",
"component_clause_1 : type_prefix_type_specifier_ component_declaration_1",
"component_declaration_1 : declaration comment",
"short_class_definition : class_prefixes short_class_specifier",
"optional_each_or_final_ :",
"optional_each_or_final_ : EACH",
"optional_each_or_final_ : FINAL",
"optional_each_or_final_ : EACH FINAL",
"equation_section : EQUATION equation_loop_",
"equation_section : INITIALEQUATION equation_loop_",
"equation_loop_ :",
"equation_loop_ : equation_loop_ equation ';'",
"algorithm_section : ALGORITHM statement_loop_",
"algorithm_section : INITIALALGORITHM statement_loop_",
"statement_loop_ :",
"statement_loop_ : statement_loop_ statement ';'",
"equation : equation_body_ comment",
"equation_body_ : simple_expression '=' expression",
"equation_body_ : if_equation",
"equation_body_ : for_equation",
"equation_body_ : connect_clause",
"equation_body_ : when_equation",
"equation_body_ : component_reference function_call_args",
"statement : statement_body_ comment",
"statement_body_ : component_reference DEF expression",
"statement_body_ : component_reference function_call_args",
"statement_body_ : '(' output_expression_list ')' DEF component_reference function_call_args",
"statement_body_ : BREAK",
"statement_body_ : RETURN",
"statement_body_ : if_statement",
"statement_body_ : for_statement",
"statement_body_ : while_statement",
"statement_body_ : when_statement",
"if_equation : IF expression THEN equation_loop_ elseif_equation_loop_ else_part_equation_ END IF",
"elseif_equation_loop_ :",
"elseif_equation_loop_ : elseif_equation_loop_ ELSEIF expression THEN equation_loop_",
"else_part_equation_ :",
"else_part_equation_ : ELSE equation_loop_",
"if_statement : IF expression THEN statement_loop_ elseif_statement_loop_ else_part_statement_ END IF",
"elseif_statement_loop_ :",
"elseif_statement_loop_ : elseif_statement_loop_ ELSEIF expression THEN statement_loop_",
"else_part_statement_ :",
"else_part_statement_ : ELSE statement_loop_",
"for_equation : FOR for_indices LOOP equation_loop_ END FOR",
"for_statement : FOR for_indices LOOP statement_loop_ END FOR",
"for_indices : for_index",
"for_indices : for_indices ',' for_index",
"for_index : IDENT",
"for_index : IDENT IN expression",
"while_statement : WHILE expression LOOP statement_loop_ END WHILE",
"when_equation : WHEN expression THEN equation_loop_ elsewhen_equation_loop_ END WHEN",
"elsewhen_equation_loop_ :",
"elsewhen_equation_loop_ : elsewhen_equation_loop_ ELSEWHEN expression THEN equation_loop_",
"when_statement : WHEN expression THEN statement_loop_ elsewhen_statement_loop_ END WHEN",
"elsewhen_statement_loop_ :",
"elsewhen_statement_loop_ : elsewhen_statement_loop_ ELSEWHEN expression THEN statement_loop_",
"connect_clause : CONNECT '(' component_reference ',' component_reference ')'",
"expression : simple_expression",
"expression : IF expression THEN expression elseif_expression_loop_ ELSE expression",
"elseif_expression_loop_ :",
"elseif_expression_loop_ : elseif_expression_loop_ ELSEIF expression THEN expression",
"simple_expression : logical_expression",
"simple_expression : logical_expression ':' logical_expression",
"simple_expression : logical_expression ':' logical_expression ':' logical_expression",
"logical_expression : logical_term",
"logical_expression : logical_expression OR logical_term",
"logical_term : logical_factor",
"logical_term : logical_term AND logical_factor",
"logical_factor : relation",
"logical_factor : NOT relation",
"relation : arithmetic_expression",
"relation : arithmetic_expression RELATIONAL_OPERATOR arithmetic_expression",
"arithmetic_expression : term",
"arithmetic_expression : ADD_OPERATOR term",
"arithmetic_expression : arithmetic_expression ADD_OPERATOR term",
"term : factor",
"term : term MUL_OPERATOR factor",
"factor : primary",
"factor : primary EXP_OPERATOR primary",
"expression_list_rows_ : expression_list",
"expression_list_rows_ : expression_list_rows_ ';' expression_list",
"primary : UNSIGNED_NUMBER",
"primary : STRING",
"primary : FALSE",
"primary : TRUE",
"primary : component_reference function_call_args",
"primary : DER function_call_args",
"primary : PURE function_call_args",
"primary : component_reference",
"primary : '(' output_expression_list ')'",
"primary : '[' expression_list_rows_ ']'",
"primary : '{' array_arguments '}'",
"type_specifier : name",
"type_specifier : '.' name",
"name : IDENT",
"name : name '.' IDENT",
"component_reference : IDENT",
"component_reference : IDENT array_subscripts",
"component_reference : '.' IDENT",
"component_reference : '.' IDENT array_subscripts",
"component_reference : component_reference '.' IDENT",
"component_reference : component_reference '.' IDENT array_subscripts",
"function_call_args : '(' ')'",
"function_call_args : '(' function_arguments ')'",
"function_arguments : function_argument",
"function_arguments : function_argument ',' function_arguments_non_first",
"function_arguments : expression FOR for_indices",
"function_arguments : named_arguments",
"function_arguments_non_first : function_argument",
"function_arguments_non_first : function_argument ',' function_arguments_non_first",
"function_arguments_non_first : named_arguments",
"array_arguments : expression",
"array_arguments : expression ',' array_arguments_non_first",
"array_arguments : expression FOR for_indices",
"array_arguments_non_first : expression",
"array_arguments_non_first : expression ',' array_arguments_non_first",
"named_arguments : named_argument",
"named_arguments : named_arguments ',' named_argument",
"named_argument : IDENT '=' function_argument",
"function_argument : expression",
"function_argument : argument_fn_",
"argument_fn_ : FUNCTION name '(' ')'",
"argument_fn_ : FUNCTION name '(' named_arguments ')'",
"output_expression_list :",
"output_expression_list : expression",
"output_expression_list : output_expression_list ','",
"output_expression_list : output_expression_list ',' expression",
"expression_list : expression",
"expression_list : expression_list ',' expression",
"array_subscripts : subscripts_in_ '[' array_subscripts_loop_ subscripts_out_ ']'",
"subscripts_in_ :",
"subscripts_out_ :",
"array_subscripts_loop_ : subscript",
"array_subscripts_loop_ : array_subscripts_loop_ ',' subscript",
"subscript : ':'",
"subscript : expression",
"comment : string_comment",
"comment : string_comment annotation",
"string_comment :",
"string_comment : string_comment_list_",
"string_comment_list_ : STRING",
"string_comment_list_ : string_comment_list_ '+' STRING",
"annotation : ANNOTATION class_modification",
 ""]
(* skeleton code 2018-02-11 *)

(* Define yylexstate_t and yylex : yylexstate_t -> int * yyv_t * yylexstate_t. *)

(*exception SyntaxError of string*)

val YYSTACKSIZE = 500
val YYMAXDEPTH = 500

type yysm_t = {
  yydebug : bool ref,
  yystate : int ref,
  yynerrs : int ref,
  yyerrflag : int ref,
  yychar : int ref,
  yysp : int ref,
  yyval : yyv_t ref,
  yylval : yyv_t ref,
  yyss : int Array.array,
  yyvs : yyv_t Array.array,
  yylexstate : yylexstate_t ref}

fun yyvs_ref (sm : yysm_t) (i : int) = Array.sub ((#yyvs sm), !(#yysp sm) + i)
fun yyss_ref (sm : yysm_t) = Array.sub ((#yyss sm), !(#yysp sm))
fun yyvs_set (sm : yysm_t) v = Array.update ((#yyvs sm), !(#yysp sm), v)
fun yyss_set (sm : yysm_t) v = Array.update ((#yyss sm), !(#yysp sm), v)
fun yysp_inc (sm : yysm_t) (i : int) = ((#yysp sm) := !(#yysp sm) + i)

fun yyvref v (i :int) = Vector.sub (v, i)

fun yyerror (s : string) : unit = ()

(* yysm_g is used when debugging, which stores the parser state globally. *)

val yysm_g : yysm_t = {
    yydebug = ref true,
    yystate = ref 0,
    yynerrs = ref 0,
    yyerrflag = ref 0,
    yychar = ref (~1),
    yysp = ref 0,
    yyval = ref yyvalue_null,
    yylval = ref yyvalue_null,
    yyss = Array.array (YYSTACKSIZE, 0),
    yyvs = Array.array (YYSTACKSIZE, yyvalue_null),
    (*yylexstate = ref {s=TextIO.stdIn, line=0, column=0, unget=[#"_"]}*)
    yylexstate = ref yylexstate_dummy}

fun yyparse (debug : bool) (yylex : yylexstate_t -> int * yyv_t * yylexstate_t)
	    (yylexstate : yylexstate_t) : yysm_t = (
  let
    val yysm_n = {
	yydebug = ref debug,
	yystate = ref 0,
	yynerrs = ref 0,
	yyerrflag = ref 0,
	yychar = ref (~1),
	yysp = ref 0,
	yyval = ref yyvalue_null,
	yylval = ref yyvalue_null,
	yyss = Array.array (YYSTACKSIZE, 0),
	yyvs = Array.array (YYSTACKSIZE, yyvalue_null),
	yylexstate = ref yylexstate}
    val yysm = if (debug) then yysm_g else yysm_n
  in
    (#yydebug yysm) := debug ;
    (#yynerrs yysm) := 0 ;
    (#yyerrflag yysm) := 0 ;
    (#yychar yysm) := (~1) ;

    (#yysp yysm) := 0 ;
    (#yystate yysm) := 0 ;
    (#yylexstate yysm) := yylexstate;
    (yyss_set yysm 0) ;
    (yyloop yylex yysm)
  end)

and yydebug_print (yysm : yysm_t) (s : string) : unit = (
  if !(#yydebug yysm) then
    (TextIO.print (s ^ "\n"))
  else
    ())

and yyaccept (yysm : yysm_t) : yysm_t = (
    (yydebug_print yysm ("debug: YYACCEPT")) ;
    yysm)

and yyabort (yysm : yysm_t) : unit = ()

and yytoken_name (yysm : yysm_t) : string = (
    let
      val yys = if (!(#yychar yysm) <= YYMAXTOKEN) then
		  (yyvref yyname (!(#yychar yysm)))
		else
		  ""
    in
      if ("" <> yys) then
	yys
      else
	"illegal-symbol"
    end)

and yyreduce (yylex : yylexstate_t -> int * yyv_t * yylexstate_t)
	     (yysm : yysm_t) (yyn9 : int) : yysm_t = (
    (yydebug_print yysm ("debug: state " ^ (Int.toString (!(#yystate yysm)))
			 ^ ", reducing by rule " ^ (Int.toString yyn9)
			 ^ " (" ^ (yyvref yyrule yyn9) ^ ")")) ;
    let
      val yym0 = (yyvref yylen yyn9)
    in
      (#yyval yysm) := (yyvs_ref yysm (1 - yym0)) ;
      (case yyn9 of
	 0 => ()
| 1 =>
(* line 342 "modelica-grammar.y" *)
(#yyval yysm) := VS_MAIN (
		((Name []), (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 2 =>
(* line 344 "modelica-grammar.y" *)
(#yyval yysm) := VS_MAIN (
		((case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 3 =>
(* line 351 "modelica-grammar.y" *)
(#yyval yysm) := VS_NAME (
		(Name []))
| 4 =>
(* line 353 "modelica-grammar.y" *)
(#yyval yysm) := VS_NAME (
		(case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))))
| 5 =>
(* line 358 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_DEFINITION_LIST (
		[])
| 6 =>
(* line 360 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_DEFINITION_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_CLASS_DEFINITION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (~1)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))]))
| 7 =>
(* line 362 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_DEFINITION_LIST (
		((case (yyvs_ref yysm (~3)) of (VS_CLASS_DEFINITION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))) ++ [set_class_final (case (yyvs_ref yysm (~1)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))]))
| 8 =>
(* line 372 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_DEFINITION (
		(set_class_prefixes (case (yyvs_ref yysm (~1)) of (VS_CLASS_PREFIX x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) (case (yyvs_ref yysm (0)) of (VS_CLASS_SPECIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 9 =>
(* line 374 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_DEFINITION (
		let
		    val (k, p) = (case (yyvs_ref yysm (~1)) of (VS_CLASS_PREFIX x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))
		    val pp = (k, (set_encapsulated p))
		in
		    (set_class_prefixes pp (case (yyvs_ref yysm (0)) of (VS_CLASS_SPECIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
		end)
| 11 =>
(* line 385 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		case (case (yyvs_ref yysm (0)) of (VS_CLASS_PREFIX x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))) of
		    (k, p) => (k, (set_partial p)))
| 12 =>
(* line 394 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Class, no_class_prefixes))
| 13 =>
(* line 396 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Model, no_class_prefixes))
| 14 =>
(* line 398 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Record, no_class_prefixes))
| 15 =>
(* line 400 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Operator_Record, no_class_prefixes))
| 16 =>
(* line 402 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Block, no_class_prefixes))
| 17 =>
(* line 404 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Connector false, no_class_prefixes))
| 18 =>
(* line 406 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Connector true, no_class_prefixes))
| 19 =>
(* line 408 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Type, no_class_prefixes))
| 20 =>
(* line 410 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Package, no_class_prefixes))
| 21 =>
(* line 412 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		((Function false), no_class_prefixes))
| 22 =>
(* line 414 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		((Function true), no_class_prefixes))
| 23 =>
(* line 416 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		((Function false), no_class_prefixes))
| 24 =>
(* line 418 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		((Operator_Function false), no_class_prefixes))
| 25 =>
(* line 420 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		((Operator_Function true), no_class_prefixes))
| 26 =>
(* line 422 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		((Operator_Function false), no_class_prefixes))
| 27 =>
(* line 424 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_PREFIX (
		(Operator, no_class_prefixes))
| 31 =>
(* line 440 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		if (not ((case (yyvs_ref yysm (~4)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) = (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))) then
		    (syntax_error "END does not match")
		else
		    Defclass ((Id (case (yyvs_ref yysm (~4)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), bad_tag),
			      (make_predefinition_body MAIN (case (yyvs_ref yysm (~2)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))
			       (Annotation []) (Comment (case (yyvs_ref yysm (~3)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3))))))))
| 32 =>
(* line 447 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		if (not ((case (yyvs_ref yysm (~4)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) = (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))) then
		    (syntax_error "END does not match")
		else
		    let
			val k0 = (make_predefinition_body MAIN (case (yyvs_ref yysm (~2)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))
				  (Annotation []) (Comment (case (yyvs_ref yysm (~3)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3))))))
			val base = (Def_Named (Name [(case (yyvs_ref yysm (~4)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4))))]), [])
		    in
			Defclass ((Id (case (yyvs_ref yysm (~4)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), bad_tag),
				  Def_Extending (false, base, k0))
		    end)
| 33 =>
(* line 460 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		if (not ((case (yyvs_ref yysm (~5)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))) = (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))) then
		    (syntax_error "END does not match")
		else
		    let
			val k0 = (make_predefinition_body MAIN (case (yyvs_ref yysm (~2)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))
				  (Annotation []) (Comment (case (yyvs_ref yysm (~3)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3))))))
			val base = (Def_Named (Name [(case (yyvs_ref yysm (~5)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5))))]), (case (yyvs_ref yysm (~4)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))))
		    in
			Defclass ((Id (case (yyvs_ref yysm (~5)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), bad_tag),
				  Def_Extending (false, base, k0))
		    end)
| 34 =>
(* line 478 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val body = [Element_Enumerators NONE]
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~6)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~6)))), bad_tag),
			      (make_predefinition_body ENUM body aa ww))
		end)
| 35 =>
(* line 486 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val body = [Element_Enumerators (SOME [])]
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~5)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), bad_tag),
			      (make_predefinition_body ENUM body aa ww))
		end)
| 36 =>
(* line 494 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val body = [Element_Enumerators (SOME (case (yyvs_ref yysm (~2)) of (VS_IDENT_COMMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))))]
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~6)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~6)))), bad_tag),
			      (make_predefinition_body ENUM body aa ww))
		end)
| 37 =>
(* line 502 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val k = Def_Named (case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~4)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), bad_tag),
			      (make_short_predefinition k (case (yyvs_ref yysm (~2)) of (VS_TYPE_INPUT_OR_OUTPUT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ([], []) aa ww))
		end)
| 38 =>
(* line 510 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val k = Def_Named (case (yyvs_ref yysm (~2)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~5)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), bad_tag),
			      (make_short_predefinition k (case (yyvs_ref yysm (~3)) of (VS_TYPE_INPUT_OR_OUTPUT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))) ([], (case (yyvs_ref yysm (~1)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))) aa ww))
		end)
| 39 =>
(* line 518 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val k = Def_Named (case (yyvs_ref yysm (~2)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~5)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), bad_tag),
			      (make_short_predefinition k (case (yyvs_ref yysm (~3)) of (VS_TYPE_INPUT_OR_OUTPUT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))) ((case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), []) aa ww))
		end)
| 40 =>
(* line 527 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val k = Def_Named (case (yyvs_ref yysm (~3)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~6)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~6)))), bad_tag),
			      (make_short_predefinition k (case (yyvs_ref yysm (~4)) of (VS_TYPE_INPUT_OR_OUTPUT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) ((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (~1)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))) aa ww))
		end)
| 41 =>
(* line 541 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_SPECIFIER (
		let
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Defclass ((Id (case (yyvs_ref yysm (~8)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~8)))), bad_tag),
			      Def_Der (bad_tag, bad_class, (case (yyvs_ref yysm (~4)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), (case (yyvs_ref yysm (~2)) of (VS_ID_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), aa, ww))
		end)
| 42 =>
(* line 551 "modelica-grammar.y" *)
(#yyval yysm) := VS_ID_LIST (
		[Id (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 43 =>
(* line 553 "modelica-grammar.y" *)
(#yyval yysm) := VS_ID_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_ID_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [Id (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 44 =>
(* line 558 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_INPUT_OR_OUTPUT (
		Acausal)
| 45 =>
(* line 560 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_INPUT_OR_OUTPUT (
		Input)
| 46 =>
(* line 562 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_INPUT_OR_OUTPUT (
		Output)
| 48 =>
(* line 568 "modelica-grammar.y" *)
(#yyval yysm) := VS_IDENT_COMMENT_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_IDENT_COMMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ (case (yyvs_ref yysm (0)) of (VS_IDENT_COMMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 49 =>
(* line 573 "modelica-grammar.y" *)
(#yyval yysm) := VS_IDENT_COMMENT_LIST (
		let
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    [(Id (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), aa, ww)]
		end)
| 51 =>
(* line 583 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [Element_Annotation (case (yyvs_ref yysm (~1)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))]))
| 52 =>
(* line 585 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~3)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))) ++ [(case (yyvs_ref yysm (~1)) of (VS_ELEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))]))
| 53 =>
(* line 587 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~5)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))) ++ [(case (yyvs_ref yysm (~3)) of (VS_ELEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3))))] ++ [Element_Annotation (case (yyvs_ref yysm (~1)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))]))
| 55 =>
(* line 597 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ (map (set_visibility Public) (case (yyvs_ref yysm (0)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 56 =>
(* line 599 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ (map (set_visibility Protected) (case (yyvs_ref yysm (0)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 57 =>
(* line 601 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~1)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) ++ [(case (yyvs_ref yysm (0)) of (VS_ELEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 58 =>
(* line 603 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~1)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) ++ [(case (yyvs_ref yysm (0)) of (VS_ELEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 59 =>
(* line 610 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (NONE, NONE, Annotation []))
| 60 =>
(* line 612 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (NONE, NONE, (case (yyvs_ref yysm (0)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 61 =>
(* line 614 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (SOME (case (yyvs_ref yysm (0)) of (VS_LANGUAGE x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE, Annotation []))
| 62 =>
(* line 616 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (SOME (case (yyvs_ref yysm (~1)) of (VS_LANGUAGE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), NONE, (case (yyvs_ref yysm (0)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 63 =>
(* line 618 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (NONE, SOME (case (yyvs_ref yysm (0)) of (VS_STATEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), Annotation []))
| 64 =>
(* line 620 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (NONE, SOME (case (yyvs_ref yysm (~1)) of (VS_STATEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 65 =>
(* line 622 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (SOME (case (yyvs_ref yysm (~1)) of (VS_LANGUAGE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), SOME (case (yyvs_ref yysm (0)) of (VS_STATEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), Annotation []))
| 66 =>
(* line 624 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		Element_External (SOME (case (yyvs_ref yysm (~2)) of (VS_LANGUAGE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), SOME (case (yyvs_ref yysm (~1)) of (VS_STATEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 67 =>
(* line 629 "modelica-grammar.y" *)
(#yyval yysm) := VS_LANGUAGE (
		(case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 68 =>
(* line 634 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Call (([], Vref (NONE, [(Id (case (yyvs_ref yysm (~2)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), [])]), []),
			 Annotation [], Comment []))
| 69 =>
(* line 637 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Call (([], Vref (NONE, [(Id (case (yyvs_ref yysm (~3)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))), [])]), (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
			 Annotation [], Comment []))
| 70 =>
(* line 640 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Call (([(case (yyvs_ref yysm (~4)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4))))], Vref (NONE, [(Id (case (yyvs_ref yysm (~2)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), [])]), []),
			 Annotation [], Comment []))
| 71 =>
(* line 643 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Call (([(case (yyvs_ref yysm (~5)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5))))], Vref (NONE, [(Id (case (yyvs_ref yysm (~3)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))), [])]), (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
			 Annotation [], Comment []))
| 72 =>
(* line 649 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		[])
| 73 =>
(* line 651 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ (case (yyvs_ref yysm (~1)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))))
| 74 =>
(* line 656 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		(case (yyvs_ref yysm (0)) of (VS_ELEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 75 =>
(* line 658 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_ELEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 76 =>
(* line 660 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val h = NONE
		in
		    if (#Redeclare (case (yyvs_ref yysm (~2)) of (VS_PREFIX_REDECLARE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))) then
			(map (fn c => Redeclare_State (Public, (case (yyvs_ref yysm (~1)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), c, h)) (case (yyvs_ref yysm (0)) of (VS_COMPONENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
		    else
			(map (fn c => Element_State (Public, (case (yyvs_ref yysm (~1)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), c, h)) (case (yyvs_ref yysm (0)) of (VS_COMPONENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
		end)
| 77 =>
(* line 669 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val r = (set_element_prefix_replaceable (case (yyvs_ref yysm (~2)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))))
		    val h = NONE
		in
		    if (#Redeclare (case (yyvs_ref yysm (~3)) of (VS_PREFIX_REDECLARE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3))))) then
			(map (fn c => Redeclare_State (Public, r, c, h)) (case (yyvs_ref yysm (0)) of (VS_COMPONENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
		    else
			(map (fn c => Element_State (Public, r, c, h)) (case (yyvs_ref yysm (0)) of (VS_COMPONENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
		end)
| 78 =>
(* line 680 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val r = (set_element_prefix_replaceable (case (yyvs_ref yysm (~4)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))))
		    val (t, m) = (case (yyvs_ref yysm (~1)) of (VS_CONSTRAINT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		    val h = SOME (t, m, aa, ww)
		in
		    if (#Redeclare (case (yyvs_ref yysm (~5)) of (VS_PREFIX_REDECLARE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5))))) then
			(map (fn c => Redeclare_State (Public, r, c, h)) (case (yyvs_ref yysm (~2)) of (VS_COMPONENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))))
		    else
			(map (fn c => Element_State (Public, r, c, h)) (case (yyvs_ref yysm (~2)) of (VS_COMPONENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))))
		end)
| 79 =>
(* line 692 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val h = NONE
		in
		    if (#Redeclare (case (yyvs_ref yysm (~2)) of (VS_PREFIX_REDECLARE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))) then
			[Redefine_Class (Public, (case (yyvs_ref yysm (~1)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), h)]
		    else
			[Element_Class (Public, (case (yyvs_ref yysm (~1)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), h)]
		end)
| 80 =>
(* line 701 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val r = (set_element_prefix_replaceable (case (yyvs_ref yysm (~2)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))))
		    val h = NONE
		in
		    if (#Redeclare (case (yyvs_ref yysm (~3)) of (VS_PREFIX_REDECLARE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3))))) then
			[Redefine_Class (Public, r, (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), h)]
		    else
			[Element_Class (Public, r, (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), h)]
		end)
| 81 =>
(* line 712 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val r = (set_element_prefix_replaceable (case (yyvs_ref yysm (~4)) of (VS_ELEMENT_PREFIXES x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))))
		    val (t, m) = (case (yyvs_ref yysm (~1)) of (VS_CONSTRAINT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		    val h = SOME (t, m, aa, ww)
		in
		    if (#Redeclare (case (yyvs_ref yysm (~5)) of (VS_PREFIX_REDECLARE x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5))))) then
			[Redefine_Class (Public, r, (case (yyvs_ref yysm (~2)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), h)]
		    else
			[Element_Class (Public, r, (case (yyvs_ref yysm (~2)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), h)]
		end)
| 82 =>
(* line 727 "modelica-grammar.y" *)
(#yyval yysm) := VS_PREFIX_REDECLARE (
		{Redeclare=false})
| 83 =>
(* line 729 "modelica-grammar.y" *)
(#yyval yysm) := VS_PREFIX_REDECLARE (
		{Redeclare=true})
| 84 =>
(* line 734 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=false, Inner=false, Outer=false,
		 Replaceable=false})
| 85 =>
(* line 737 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=false, Inner=false, Outer=true,
		 Replaceable=false})
| 86 =>
(* line 740 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=false, Inner=true, Outer=false,
		 Replaceable=false})
| 87 =>
(* line 743 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=true, Inner=false, Outer=false,
		 Replaceable=false})
| 88 =>
(* line 746 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=false, Inner=true, Outer=true,
		 Replaceable=false})
| 89 =>
(* line 749 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=true, Inner=true, Outer=false,
		 Replaceable=false})
| 90 =>
(* line 752 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=true, Inner=false, Outer=true,
		 Replaceable=false})
| 91 =>
(* line 755 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_PREFIXES (
		{Final=true, Inner=true, Outer=true,
		 Replaceable=false})
| 92 =>
(* line 761 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val (p, v) = (name_prefix (case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    [Import_Clause (Public, p, SOME (v, v), aa, ww)]
		end)
| 93 =>
(* line 768 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val (p, v) = (name_prefix (case (yyvs_ref yysm (~3)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    [Import_Clause (Public, (case (yyvs_ref yysm (~3)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))), NONE, aa, ww)]
		end)
| 94 =>
(* line 775 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    (map
			(fn v =>
			    (Import_Clause
				(Public, (case (yyvs_ref yysm (~5)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), SOME (v, v), aa, ww)))
		    (case (yyvs_ref yysm (~2)) of (VS_ID_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))))
		end)
| 95 =>
(* line 785 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT_LIST (
		let
		    val (p, v) = (name_prefix (case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))))
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    [Import_Clause
			(Public, p, SOME (v, (Id (case (yyvs_ref yysm (~3)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))))), aa, ww)]
		end)
| 97 =>
(* line 802 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Extends_Clause
		    (Public, ((case (yyvs_ref yysm (0)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), []), Annotation [])))
| 98 =>
(* line 805 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Extends_Clause
		    (Public, ((case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), []), (case (yyvs_ref yysm (0)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 99 =>
(* line 808 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Extends_Clause
		    (Public, ((case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))), Annotation [])))
| 100 =>
(* line 811 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Extends_Clause
		    (Public, ((case (yyvs_ref yysm (~2)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (~1)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))), (case (yyvs_ref yysm (0)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 101 =>
(* line 817 "modelica-grammar.y" *)
(#yyval yysm) := VS_CONSTRAINT (
		(Def_Named (case (yyvs_ref yysm (0)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), []))
| 102 =>
(* line 819 "modelica-grammar.y" *)
(#yyval yysm) := VS_CONSTRAINT (
		(Def_Named (case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 103 =>
(* line 826 "modelica-grammar.y" *)
(#yyval yysm) := VS_COMPONENT_LIST (
		(map (make_component_clause (case (yyvs_ref yysm (~1)) of (VS_COMPONENT_TYPE_SPECIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) []) (case (yyvs_ref yysm (0)) of (VS_DECLARATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 104 =>
(* line 828 "modelica-grammar.y" *)
(#yyval yysm) := VS_COMPONENT_LIST (
		(map (make_component_clause (case (yyvs_ref yysm (~2)) of (VS_COMPONENT_TYPE_SPECIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))) (case (yyvs_ref yysm (0)) of (VS_DECLARATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 105 =>
(* line 833 "modelica-grammar.y" *)
(#yyval yysm) := VS_COMPONENT_TYPE_SPECIFIER (
		((case (yyvs_ref yysm (~1)) of (VS_COMPONENT_PREFIX x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 106 =>
(* line 838 "modelica-grammar.y" *)
(#yyval yysm) := VS_COMPONENT_PREFIX (
		((case (yyvs_ref yysm (~2)) of (VS_TYPE_FLOW_OR_STREAM x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (~1)) of (VS_TYPE_VARIABILITY x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_TYPE_INPUT_OR_OUTPUT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 107 =>
(* line 843 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_FLOW_OR_STREAM (
		Effort)
| 108 =>
(* line 845 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_FLOW_OR_STREAM (
		Flow)
| 109 =>
(* line 847 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_FLOW_OR_STREAM (
		Stream)
| 110 =>
(* line 854 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_VARIABILITY (
		Continuous)
| 111 =>
(* line 856 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_VARIABILITY (
		Discrete)
| 112 =>
(* line 858 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_VARIABILITY (
		Parameter)
| 113 =>
(* line 860 "modelica-grammar.y" *)
(#yyval yysm) := VS_TYPE_VARIABILITY (
		Constant)
| 114 =>
(* line 865 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_DECLARATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 115 =>
(* line 867 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_DECLARATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_DECLARATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 116 =>
(* line 872 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION (
		let
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    case (case (yyvs_ref yysm (~1)) of (VS_DECLARATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) of
			(v, s, m, NONE, Annotation [], Comment []) =>
			    (v, s, m, NONE, aa, ww)
		      | _ => raise Match
		end)
| 117 =>
(* line 881 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION (
		let
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    case (case (yyvs_ref yysm (~2)) of (VS_DECLARATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) of
			(v, s, m, NONE, Annotation [], Comment []) =>
			    (v, s, m, SOME (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), aa, ww)
		      | _ => raise Match
		end)
| 118 =>
(* line 893 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 119 =>
(* line 898 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION (
		(Id (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), [], [], NONE, Annotation [], Comment []))
| 120 =>
(* line 900 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION (
		(Id (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), [], (case (yyvs_ref yysm (0)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE, Annotation [], Comment []))
| 121 =>
(* line 902 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION (
		(Id (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), [], NONE, Annotation [], Comment []))
| 122 =>
(* line 904 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION (
		(Id (case (yyvs_ref yysm (~2)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE, Annotation [], Comment []))
| 123 =>
(* line 923 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		(case (yyvs_ref yysm (0)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 124 =>
(* line 925 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [Mod_Value (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 125 =>
(* line 927 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		[Mod_Value (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 126 =>
(* line 929 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		[Mod_Value (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 127 =>
(* line 934 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		[])
| 128 =>
(* line 936 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		(case (yyvs_ref yysm (~1)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))))
| 129 =>
(* line 941 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_MODIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 130 =>
(* line 943 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_MODIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 133 =>
(* line 953 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		Mod_Redefine ((set_modifier_prefixes false (case (yyvs_ref yysm (~1)) of (VS_EACH_OR_FINAL x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
			      (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE))
| 134 =>
(* line 956 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		Mod_Redeclare ((set_modifier_prefixes false (case (yyvs_ref yysm (~1)) of (VS_EACH_OR_FINAL x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
			      (case (yyvs_ref yysm (0)) of (VS_COMPONENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE))
| 135 =>
(* line 959 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		case (case (yyvs_ref yysm (0)) of (VS_MODIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))) of
		    Mod_Redefine (_, d, r) =>
			Mod_Redefine ((set_modifier_prefixes true (case (yyvs_ref yysm (~1)) of (VS_EACH_OR_FINAL x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
				      d, r)
		  | Mod_Redeclare (_, d, r) =>
			Mod_Redeclare ((set_modifier_prefixes true (case (yyvs_ref yysm (~1)) of (VS_EACH_OR_FINAL x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
				       d, r)
		  | _ => raise Match)
| 136 =>
(* line 971 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		case (case (yyvs_ref yysm (0)) of (VS_MODIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))) of
		    Mod_Entry (_, n, m, c) =>
			Mod_Entry ((case (yyvs_ref yysm (~1)) of (VS_EACH_OR_FINAL x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), n, m, c)
		  | _ => raise Match)
| 137 =>
(* line 976 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		case (case (yyvs_ref yysm (0)) of (VS_MODIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))) of
		    Mod_Redefine (_, d, r) =>
			Mod_Redefine ((set_modifier_prefixes true (case (yyvs_ref yysm (~1)) of (VS_EACH_OR_FINAL x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
				      d, r)
		  | Mod_Redeclare (_, d, r) =>
			Mod_Redeclare ((set_modifier_prefixes true (case (yyvs_ref yysm (~1)) of (VS_EACH_OR_FINAL x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))),
				       d, r)
		  | _ => raise Match)
| 138 =>
(* line 991 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		Mod_Entry (no_each_or_final, (case (yyvs_ref yysm (~1)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), [], Comment (case (yyvs_ref yysm (0)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 139 =>
(* line 993 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		Mod_Entry (no_each_or_final, (case (yyvs_ref yysm (~2)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (~1)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), Comment (case (yyvs_ref yysm (0)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 140 =>
(* line 1002 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		Mod_Redefine (modifier_prefixes_replaceable,
			      (case (yyvs_ref yysm (0)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE))
| 141 =>
(* line 1005 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		let
		    val (t, m) = (case (yyvs_ref yysm (0)) of (VS_CONSTRAINT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Mod_Redefine (modifier_prefixes_replaceable,
				  (case (yyvs_ref yysm (~1)) of (VS_CLASS_DEFINITION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))),
				  SOME (t, m, Annotation [], Comment []))
		end)
| 142 =>
(* line 1013 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		Mod_Redeclare (modifier_prefixes_replaceable,
			       (case (yyvs_ref yysm (0)) of (VS_COMPONENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE))
| 143 =>
(* line 1016 "modelica-grammar.y" *)
(#yyval yysm) := VS_MODIFIER (
		let
		    val (t, m) = (case (yyvs_ref yysm (0)) of (VS_CONSTRAINT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    Mod_Redeclare (modifier_prefixes_replaceable,
				   (case (yyvs_ref yysm (~1)) of (VS_COMPONENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))),
				   SOME (t, m, Annotation [], Comment []))
		end)
| 144 =>
(* line 1027 "modelica-grammar.y" *)
(#yyval yysm) := VS_COMPONENT (
		(make_component_clause (case (yyvs_ref yysm (~1)) of (VS_COMPONENT_TYPE_SPECIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) [] (case (yyvs_ref yysm (0)) of (VS_DECLARATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 145 =>
(* line 1032 "modelica-grammar.y" *)
(#yyval yysm) := VS_DECLARATION (
		let
		    val (aa, ww) = (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))
		in
		    case (case (yyvs_ref yysm (~1)) of (VS_DECLARATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) of
			(v, s, m, NONE, Annotation [], Comment []) =>
			    (v, s, m, NONE, aa, ww)
		      | _ => raise Match
		end)
| 146 =>
(* line 1044 "modelica-grammar.y" *)
(#yyval yysm) := VS_CLASS_DEFINITION (
		(set_class_prefixes (case (yyvs_ref yysm (~1)) of (VS_CLASS_PREFIX x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) (case (yyvs_ref yysm (0)) of (VS_CLASS_SPECIFIER x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 147 =>
(* line 1049 "modelica-grammar.y" *)
(#yyval yysm) := VS_EACH_OR_FINAL (
		{Each=false, Final=false})
| 148 =>
(* line 1051 "modelica-grammar.y" *)
(#yyval yysm) := VS_EACH_OR_FINAL (
		{Each=true, Final=false})
| 149 =>
(* line 1053 "modelica-grammar.y" *)
(#yyval yysm) := VS_EACH_OR_FINAL (
		{Each=false, Final=true})
| 150 =>
(* line 1055 "modelica-grammar.y" *)
(#yyval yysm) := VS_EACH_OR_FINAL (
		{Each=true, Final=true})
| 151 =>
(* line 1062 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Element_Equations (false, (case (yyvs_ref yysm (0)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 152 =>
(* line 1064 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Element_Equations (true, (case (yyvs_ref yysm (0)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 153 =>
(* line 1069 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION_LIST (
		[])
| 154 =>
(* line 1071 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ (case (yyvs_ref yysm (~1)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))))
| 155 =>
(* line 1076 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Element_Algorithms (false, (case (yyvs_ref yysm (0)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 156 =>
(* line 1078 "modelica-grammar.y" *)
(#yyval yysm) := VS_ELEMENT (
		(Element_Algorithms (true, (case (yyvs_ref yysm (0)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))))
| 157 =>
(* line 1083 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT_LIST (
		[])
| 158 =>
(* line 1085 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ (case (yyvs_ref yysm (~1)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))))
| 159 =>
(* line 1090 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION_LIST (
		[(attach_comment_to_equation (case (yyvs_ref yysm (~1)) of (VS_EQUATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))])
| 160 =>
(* line 1095 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION (
		Eq_Eq (((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))), Annotation [], Comment []))
| 165 =>
(* line 1101 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION (
		Eq_App (((case (yyvs_ref yysm (~1)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))), Annotation [], Comment []))
| 166 =>
(* line 1106 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT_LIST (
		[(attach_comment_to_statement (case (yyvs_ref yysm (~1)) of (VS_STATEMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) (case (yyvs_ref yysm (0)) of (VS_COMMENT x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))])
| 167 =>
(* line 1111 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Assign (((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))), Annotation [], Comment []))
| 168 =>
(* line 1113 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Call (([], (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))), Annotation [], Comment []))
| 169 =>
(* line 1116 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Call (((case (yyvs_ref yysm (~4)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))), Annotation [], Comment []))
| 170 =>
(* line 1118 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Break (Annotation [], Comment []))
| 171 =>
(* line 1120 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_Return (Annotation [], Comment []))
| 176 =>
(* line 1130 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION (
		Eq_If (([((case (yyvs_ref yysm (~6)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~6)))), (case (yyvs_ref yysm (~4)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))))] ++ (case (yyvs_ref yysm (~3)) of (VS_TEST_EQUATIONS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))) ++ (case (yyvs_ref yysm (~2)) of (VS_TEST_EQUATIONS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))), Annotation [], Comment []))
| 177 =>
(* line 1135 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EQUATIONS_LIST (
		[])
| 178 =>
(* line 1137 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EQUATIONS_LIST (
		((case (yyvs_ref yysm (~4)) of (VS_TEST_EQUATIONS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) ++ [((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
| 179 =>
(* line 1142 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EQUATIONS_LIST (
		[])
| 180 =>
(* line 1144 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EQUATIONS_LIST (
		[(Otherwise, (case (yyvs_ref yysm (0)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))])
| 181 =>
(* line 1150 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_If ([((case (yyvs_ref yysm (~6)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~6)))), (case (yyvs_ref yysm (~4)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))))] ++ (case (yyvs_ref yysm (~3)) of (VS_TEST_STATEMENTS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))) ++ (case (yyvs_ref yysm (~2)) of (VS_TEST_STATEMENTS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), Annotation [], Comment []))
| 182 =>
(* line 1155 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_STATEMENTS_LIST (
		[])
| 183 =>
(* line 1157 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_STATEMENTS_LIST (
		((case (yyvs_ref yysm (~4)) of (VS_TEST_STATEMENTS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) ++ [((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
| 184 =>
(* line 1162 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_STATEMENTS_LIST (
		[])
| 185 =>
(* line 1164 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_STATEMENTS_LIST (
		[(Otherwise, (case (yyvs_ref yysm (0)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))])
| 186 =>
(* line 1169 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION (
		Eq_For (((case (yyvs_ref yysm (~4)) of (VS_FOR_INDEX_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), (case (yyvs_ref yysm (~2)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))), Annotation [], Comment []))
| 187 =>
(* line 1174 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_For (((case (yyvs_ref yysm (~4)) of (VS_FOR_INDEX_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), (case (yyvs_ref yysm (~2)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))), Annotation [], Comment []))
| 188 =>
(* line 1179 "modelica-grammar.y" *)
(#yyval yysm) := VS_FOR_INDEX_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_FOR_INDEX x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 189 =>
(* line 1181 "modelica-grammar.y" *)
(#yyval yysm) := VS_FOR_INDEX_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_FOR_INDEX_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_FOR_INDEX x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 190 =>
(* line 1186 "modelica-grammar.y" *)
(#yyval yysm) := VS_FOR_INDEX (
		(Id (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), Colon))
| 191 =>
(* line 1188 "modelica-grammar.y" *)
(#yyval yysm) := VS_FOR_INDEX (
		(Id (case (yyvs_ref yysm (~2)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 192 =>
(* line 1193 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_While (((case (yyvs_ref yysm (~4)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), (case (yyvs_ref yysm (~2)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))), Annotation [], Comment []))
| 193 =>
(* line 1199 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION (
		Eq_When (([((case (yyvs_ref yysm (~5)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), (case (yyvs_ref yysm (~3)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))))] ++ (case (yyvs_ref yysm (~2)) of (VS_TEST_EQUATIONS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))), Annotation [], Comment []))
| 194 =>
(* line 1204 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EQUATIONS_LIST (
		[])
| 195 =>
(* line 1206 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EQUATIONS_LIST (
		((case (yyvs_ref yysm (~4)) of (VS_TEST_EQUATIONS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) ++ [((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EQUATION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
| 196 =>
(* line 1212 "modelica-grammar.y" *)
(#yyval yysm) := VS_STATEMENT (
		St_When ([((case (yyvs_ref yysm (~5)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), (case (yyvs_ref yysm (~3)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))))] ++ (case (yyvs_ref yysm (~2)) of (VS_TEST_STATEMENTS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), Annotation [], Comment []))
| 197 =>
(* line 1217 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_STATEMENTS_LIST (
		[])
| 198 =>
(* line 1219 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_STATEMENTS_LIST (
		((case (yyvs_ref yysm (~4)) of (VS_TEST_STATEMENTS_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) ++ [((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_STATEMENT_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
| 199 =>
(* line 1224 "modelica-grammar.y" *)
(#yyval yysm) := VS_EQUATION (
		Eq_Connect (((case (yyvs_ref yysm (~3)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))), (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))), Annotation [], Comment []))
| 201 =>
(* line 1232 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		(make_ite ([((case (yyvs_ref yysm (~5)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~5)))), (case (yyvs_ref yysm (~3)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))))] ++ (case (yyvs_ref yysm (~2)) of (VS_TEST_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))) (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
		(*ITE ([($2, $4)] ++ $5 ++ [(Otherwise, $7)])*))
| 202 =>
(* line 1238 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EXPRESSION_LIST (
		[])
| 203 =>
(* line 1240 "modelica-grammar.y" *)
(#yyval yysm) := VS_TEST_EXPRESSION_LIST (
		((case (yyvs_ref yysm (~4)) of (VS_TEST_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))) ++ [((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
| 205 =>
(* line 1246 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Array_Triple ((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), NONE))
| 206 =>
(* line 1248 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Array_Triple ((case (yyvs_ref yysm (~4)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~4)))), (case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), SOME (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 208 =>
(* line 1254 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_binary "or"), [(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Binary ("or", $1, $3)*))
| 210 =>
(* line 1261 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_binary "and"), [(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Binary ("and", $1, $3)*))
| 212 =>
(* line 1268 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_unary "not"), [(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Unary ("not", $2)*))
| 214 =>
(* line 1275 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_relational (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))), [(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Rel ($2, $1, $3)*))
| 216 =>
(* line 1282 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_unary (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))), [(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Unary ($1, $2)*))
| 217 =>
(* line 1285 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_binary (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))), [(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Binary ($2, $1, $3)*))
| 219 =>
(* line 1292 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_binary (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))), [(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Binary ($2, $1, $3)*))
| 221 =>
(* line 1299 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((make_binary (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))), [(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
		(*Binary ($2, $1, $3)*))
| 222 =>
(* line 1305 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 223 =>
(* line 1307 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION_LIST_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 224 =>
(* line 1325 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		(string_to_literal_number (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 225 =>
(* line 1327 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		L_String (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 226 =>
(* line 1329 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		L_Bool false)
| 227 =>
(* line 1331 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		L_Bool true)
| 228 =>
(* line 1333 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		App ((case (yyvs_ref yysm (~1)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 229 =>
(* line 1335 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Der (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 230 =>
(* line 1337 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		(* Pure $2 *)
		raise error_pure_expression)
| 232 =>
(* line 1341 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		(* Strip parentheses for associativity. *)
		case (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) of
		    [NIL] => Tuple [NIL]
		  | [e] => e
		  | ee => Tuple ee)
| 233 =>
(* line 1347 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Array_Concatenation (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))))
| 234 =>
(* line 1349 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		(case (yyvs_ref yysm (~1)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))))
| 235 =>
(* line 1360 "modelica-grammar.y" *)
(#yyval yysm) := VS_NAME (
		(case (yyvs_ref yysm (0)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 236 =>
(* line 1362 "modelica-grammar.y" *)
(#yyval yysm) := VS_NAME (
		case (case (yyvs_ref yysm (0)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))) of Name s => Name ([""] ++ s))
| 237 =>
(* line 1367 "modelica-grammar.y" *)
(#yyval yysm) := VS_NAME (
		Name [(case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 238 =>
(* line 1369 "modelica-grammar.y" *)
(#yyval yysm) := VS_NAME (
		case (case (yyvs_ref yysm (~2)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) of Name ss => Name (ss ++ [(case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 239 =>
(* line 1376 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Vref (NONE, [(Id (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), [])]))
| 240 =>
(* line 1378 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Vref (NONE, [(Id (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
| 241 =>
(* line 1380 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Vref (NONE, [(Id "", []), (Id (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), [])]))
| 242 =>
(* line 1382 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Vref (NONE, [(Id "", []), (Id (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
| 243 =>
(* line 1384 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		case (case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) of
		    Vref (_, v) =>
			Vref (NONE, (v ++ [(Id (case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), [])]))
		  | _ => raise Match)
| 244 =>
(* line 1389 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		case (case (yyvs_ref yysm (~3)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))) of
		    Vref (_, v) =>
			Vref (NONE, (v ++ [(Id (case (yyvs_ref yysm (~1)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))]))
		  | _ => raise Match)
| 245 =>
(* line 1397 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[])
| 246 =>
(* line 1399 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		(case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))))
| 247 =>
(* line 1419 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 248 =>
(* line 1421 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		([(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))] ++ (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 249 =>
(* line 1423 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[Reduction_Argument ((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_FOR_INDEX_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))])
| 251 =>
(* line 1429 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 252 =>
(* line 1431 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		([(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))] ++ (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 254 =>
(* line 1440 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Array_Constructor [(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 255 =>
(* line 1442 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Array_Constructor ([(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))] ++ (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 256 =>
(* line 1444 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Array_Comprehension ((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), (case (yyvs_ref yysm (0)) of (VS_FOR_INDEX_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 257 =>
(* line 1449 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 258 =>
(* line 1451 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		([(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))] ++ (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 259 =>
(* line 1456 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 260 =>
(* line 1458 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 261 =>
(* line 1463 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Named_Argument ((Name [(case (yyvs_ref yysm (~2)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2))))]), (case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 264 =>
(* line 1473 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Closure ((case (yyvs_ref yysm (~2)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))), []))
| 265 =>
(* line 1475 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION (
		Closure ((case (yyvs_ref yysm (~3)) of (VS_NAME x) => x | _ => raise (bad_parser (yyvs_ref yysm (~3)))), (case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))))
| 266 =>
(* line 1483 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[NIL])
| 267 =>
(* line 1485 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 268 =>
(* line 1487 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		((case (yyvs_ref yysm (~1)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1)))) ++ [NIL]))
| 269 =>
(* line 1489 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 270 =>
(* line 1494 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 271 =>
(* line 1496 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 272 =>
(* line 1504 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		(case (yyvs_ref yysm (~2)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))))
| 273 =>
(* line 1509 "modelica-grammar.y" *)
(#yyval yysm) := VS_NOTHING (
		((#yylexstate yysm) := set_end_as_id true (! (#yylexstate yysm))))
| 274 =>
(* line 1514 "modelica-grammar.y" *)
(#yyval yysm) := VS_NOTHING (
		((#yylexstate yysm) := set_end_as_id false (! (#yylexstate yysm))))
| 276 =>
(* line 1520 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ (case (yyvs_ref yysm (0)) of (VS_EXPRESSION_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 277 =>
(* line 1525 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[Colon])
| 278 =>
(* line 1527 "modelica-grammar.y" *)
(#yyval yysm) := VS_EXPRESSION_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_EXPRESSION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 279 =>
(* line 1532 "modelica-grammar.y" *)
(#yyval yysm) := VS_COMMENT (
		(Annotation [], Comment (case (yyvs_ref yysm (0)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))))
| 280 =>
(* line 1534 "modelica-grammar.y" *)
(#yyval yysm) := VS_COMMENT (
		((case (yyvs_ref yysm (0)) of (VS_ANNOTATION x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))), Comment (case (yyvs_ref yysm (~1)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~1))))))
| 281 =>
(* line 1539 "modelica-grammar.y" *)
(#yyval yysm) := VS_STRING_LIST (
		[])
| 282 =>
(* line 1541 "modelica-grammar.y" *)
(#yyval yysm) := VS_STRING_LIST (
		(case (yyvs_ref yysm (0)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
| 283 =>
(* line 1546 "modelica-grammar.y" *)
(#yyval yysm) := VS_STRING_LIST (
		[(case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))])
| 284 =>
(* line 1548 "modelica-grammar.y" *)
(#yyval yysm) := VS_STRING_LIST (
		((case (yyvs_ref yysm (~2)) of (VS_STRING_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (~2)))) ++ [(case (yyvs_ref yysm (0)) of (VS_TOKEN x) => x | _ => raise (bad_parser (yyvs_ref yysm (0))))]))
| 285 =>
(* line 1553 "modelica-grammar.y" *)
(#yyval yysm) := VS_ANNOTATION (
		Annotation (case (yyvs_ref yysm (0)) of (VS_MODIFIER_LIST x) => x | _ => raise (bad_parser (yyvs_ref yysm (0)))))
(* line 2620 "y.tab.c" *)
       | _ => ()
      ) ;
      (yysp_inc yysm (~ yym0)) ;
      if (!(#yysp yysm) < 0) then
	raise (Fail "(internal) yacc stack underflow")
      else
	() ;
      (#yystate yysm) := (yyss_ref yysm) ;
      (let
	 val yym1 = (yyvref yylhs yyn9)
       in
	 if (!(#yystate yysm) = 0 andalso yym1 = 0) then
	   ((yydebug_print yysm ("debug: after reduction, "
				 ^ "shifting from state 0 to state YYFINAL="
				 ^ (Int.toString YYFINAL))) ;
	    (#yystate yysm) := YYFINAL ;
	    (yysp_inc yysm 1) ;
	    (yyss_set yysm YYFINAL) ;
	    (yyvs_set yysm (!(#yyval yysm))) ;
	    if (!(#yychar yysm) < 0) then
	      (let
		 val (t, v, s') = (yylex (!(#yylexstate yysm)))
	       in
		 (#yychar yysm) := (if (t < 0) then 0 else t) ;
		 (#yylval yysm) := v ;
		 (#yylexstate yysm) := s' ;
		 if (!(#yychar yysm) < 0) then
		   (#yychar yysm) := 0
		 else
		   () ;
		 (yydebug_print yysm ("debug: state " ^ (Int.toString YYFINAL)
				      ^ ", reading "
				      ^ (Int.toString (!(#yychar yysm)))
				      ^ " (" ^ (yytoken_name yysm) ^ ")"))
	       end)
	    else
	      () ;
	    if (!(#yychar yysm) = 0) then
	      (yyaccept yysm)
	    else
	      (yyloop yylex yysm))
	 else
	   (let
	      val yyn7 = (yyvref yygindex yym1)
	      val yyn8 = yyn7 + !(#yystate yysm)
	    in
	      if (yyn7 <> 0
		  andalso yyn8 >= 0
		  andalso yyn8 <= YYTABLESIZE
		  andalso (yyvref yycheck yyn8) = !(#yystate yysm)) then
		(#yystate yysm) := (yyvref yytable yyn8)
	      else
		(#yystate yysm) := (yyvref yydgoto yym1) ;
	      (yydebug_print yysm ("debug: after reduction, shifting from "
				   ^ "state "
				   ^ (Int.toString (yyss_ref yysm))
				   ^ " to state "
				   ^ (Int.toString (!(#yystate yysm))))) ;
	      if (!(#yysp yysm) >= YYSTACKSIZE - 1) then
		raise (Fail "yacc stack overflow")
	      else
		() ;
	      (yysp_inc yysm 1) ;
	      (yyss_set yysm (!(#yystate yysm))) ;
	      (yyvs_set yysm (!(#yyval yysm))) ;
	      (yyloop yylex yysm)
	    end)
       end)
    end)

and yyloop (yylex : yylexstate_t -> int * yyv_t * yylexstate_t)
	   (yysm : yysm_t) : yysm_t = (
    let
      val yyn0 = (yyvref yydefred (!(#yystate yysm)))
    in
      if (yyn0 <> 0) then
	(yyreduce yylex yysm yyn0)
      else
	(if (!(#yychar yysm) < 0) then
	   (let
	     val (t, v, s') = (yylex (!(#yylexstate yysm)))
	   in
	     (#yylexstate yysm) := s' ;
	     (#yychar yysm) := (if (t < 0) then 0 else t) ;
	     (#yylval yysm) := v
	   end ;
	    (yydebug_print yysm
			   ("debug: state "
			    ^ (Int.toString (!(#yystate yysm)))
			    ^ ", reading " ^ (Int.toString (!(#yychar yysm)))
			    ^ " (" ^ (yytoken_name yysm) ^ ")")))
	 else
	   () ;
	 (let
	   val yyn1 = (yyvref yysindex (!(#yystate yysm)))
	   val yyn2 = (yyn1 + !(#yychar yysm))
	 in
	   if (yyn1 <> 0
	       andalso yyn2 >= 0
	       andalso yyn2 <= YYTABLESIZE
	       andalso (yyvref yycheck yyn2) = !(#yychar yysm)) then
	     ((yydebug_print yysm ("debug: state "
				   ^ (Int.toString (!(#yystate yysm)))
				   ^ ", shifting to state "
				   ^ (Int.toString (yyvref yytable yyn2)))) ;
	      if (!(#yysp yysm) >= YYSTACKSIZE - 1) then
		raise (Fail "yacc stack overflow")
	      else
		() ;
	      (#yystate yysm) := (yyvref yytable yyn2) ;
	      (yysp_inc yysm 1) ;
	      (yyss_set yysm (!(#yystate yysm))) ;
	      (yyvs_set yysm (!(#yylval yysm))) ;
	      (#yychar yysm) := (~1) ;
	      if (!(#yyerrflag yysm) > 0) then
		(#yyerrflag yysm) := (!(#yyerrflag yysm) - 1)
	      else
		() ;
	      (yyloop yylex yysm))
	   else
	     (let
	       val yyn3 = (yyvref yyrindex (!(#yystate yysm)))
	       val yyn4 = yyn3 + !(#yychar yysm)
	     in
	       if (yyn3 <> 0
		   andalso yyn4 >= 0
		   andalso yyn4 <= YYTABLESIZE
		   andalso (yyvref yycheck yyn4) = !(#yychar yysm)) then
		 let
		   val yyn5 = (yyvref yytable yyn4)
		 in
		   (yyreduce yylex yysm yyn5)
		 end
	       else
		 (if (!(#yyerrflag yysm) = 0) then
		    ((yyerror "syntax error") ;
		     (#yynerrs yysm) := !(#yynerrs yysm) + 1)
		  else
		    () ;
		  (yyinrecovery yylex yysm))
	     end)
	 end))
    end)

and yyinrecovery (yylex : yylexstate_t -> int * yyv_t * yylexstate_t)
		 (yysm : yysm_t) : yysm_t = (
    if (!(#yyerrflag yysm) < 3) then
      ((#yyerrflag yysm) := 3 ;
       (yyinrecovery_loop yylex yysm))
    else
      (if (!(#yychar yysm) = 0) then
	 (yyabort yysm)
       else
	 () ;
       (yydebug_print yysm
		      ("debug: state "
		       ^ (Int.toString (!(#yystate yysm)))
		       ^ ", error recovery "
		       ^ "discards token "
		       ^ (Int.toString (!(#yychar yysm)))
		       ^ " (" ^ (yytoken_name yysm) ^ ")")) ;
       (#yychar yysm) := (~1) ;
       (yyloop yylex yysm)))

and yyinrecovery_loop (yylex : yylexstate_t -> int * yyv_t * yylexstate_t)
		      (yysm : yysm_t) : yysm_t = (
    let
      val yyn6 = (yyvref yysindex (yyss_ref yysm)) ;
      val yyn7 = (yyn6 + YYERRCODE)
    in
      if (yyn6 <> 0
	  andalso yyn7 >= 0
	  andalso yyn7 <= YYTABLESIZE
	  andalso (yyvref yycheck yyn7) = YYERRCODE) then
	((yydebug_print yysm ("debug: state "
			      ^ (Int.toString (yyss_ref yysm))
			      ^ ", error recovery "
			      ^ "shifting to state "
			      ^ (Int.toString (yyvref yytable yyn7)))) ;
	 if (!(#yysp yysm) >= YYSTACKSIZE - 1) then
	   raise (Fail "yacc stack overflow")
	 else
	   () ;
	 (#yystate yysm) := (yyvref yytable yyn7) ;
	 (yysp_inc yysm 1) ;
	 (yyss_set yysm (!(#yystate yysm))) ;
	 (yyvs_set yysm (!(#yylval yysm))) ;
	 (yyloop yylex yysm))
      else
	((yydebug_print yysm ("debug: error recovery "
			      ^ "discarding state "
			      ^ (Int.toString (yyss_ref yysm)))) ;
	 if (!(#yysp yysm) <= 0) then
	   (yyabort yysm)
	 else
	   () ;
	 (yysp_inc yysm (~1)) ;
	 if (!(#yysp yysm) < 0) then
	   raise (Fail "(internal) yacc stack underflow")
	 else
	   () ;
	 (yyinrecovery_loop yylex yysm))
    end)

(* line 1558 "modelica-grammar.y" *)

end

(* End of the struct defition. *)
(* line 2830 "y.tab.c" *)
